name: datachain continous integration tests
on: [push]
jobs:
  test_coordinator:
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: "client sync on localnet"
            citest: test:tosi.client.sync
            logfile: client
            composefile: docker-compose-tosi-chain.yml
          - name: "da committee on localnet"
            citest: test:tosi.da.committee.test
            logfile: da
            composefile: docker-compose-tosi-chain.yml
          - name: "simul client sync on localnet"
            citest: test:tosi.client.sync
            logfile: client
            composefile: docker-compose-tosi-chain-testnet-simul.yml
          - name: "simul da committee on localnet"
            citest: test:tosi.da.committee.test
            logfile: da
            composefile: docker-compose-tosi-chain-testnet-simul.yml
    runs-on: [self-hosted, linux, x64]
    concurrency:
      group: '${{ github.workflow }}-${{ github.ref }}-${{ matrix.name }}'
      cancel-in-progress: true
    steps:
      - name: Dump Contexts
        env:
          GITHUB_CONTEXT: ${{ toJSON(github) }}
          RUNNER_CONTEXT: ${{ toJSON(runner) }}
        run: |
          echo "$GITHUB_CONTEXT"
          echo "$RUNNER_CONTEXT"
      # git context is the default for actions but this will fail for docker in
      # a monorepo with multiple (docker) build contexts. As such, we must
      # checkout...
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: "recursive"
      - name: Stop all containers
        run: |
          docker ps -q | awk '{print $1}' | grep -v CONTAINER | xargs -L1 -r docker stop
      - name: Rming all containers
        run: |
          docker ps -q | awk '{print $1}' | grep -v CONTAINER | xargs -L1 -r docker rm
      - name: Clean up docker envionment
        run: |
          docker builder prune --keep-storage 25GB
          docker volume prune -f
          docker volume ls -qf dangling=true | xargs -L1 -r docker volume rm
      - name: Check docker-compose version
        run: |
          docker compose version

      - name: Set up caching
        uses: jpribyl/action-docker-layer-caching@v0.1.1
        # Ignore the failure of a step and avoid terminating the job.
        continue-on-error: true
      - name: Generate unique swarm key
        run: |
          docker run --rm mattjtodd/ipfs-swarm-key-gen > swarm.key
      - name: Build the containers
        run: |
          docker compose --profile build -p tosi-chain -f ${{ matrix.composefile }} build
      - name: Stop and remove any leftovers
        run: |
          docker compose -p tosi-chain -f ${{ matrix.composefile }} down --remove-orphans
      - name: Check the status of the running docker containers
        run: |
          docker ps -a
      - name: Start the containers
        run: |
          ALCHEMY_ARBITRUM_GOERLI_RPC=${{ secrets.ALCHEMY_ARBITRUM_GOERLI_RPC }} docker compose -p tosi-chain -f ${{ matrix.composefile }} up --remove-orphans --detach --wait
      - name: Build the test containers
        run: |
          sudo docker buildx build -f src/tosi_tests/Dockerfile -t test:1.0 .
      - name: Test contracts
        run: docker run --network=host test:1.0 npx hardhat test --network localhost
        if: ${{ matrix.name == 'client sync on localnet' }}
      - name: Check IPFS peers before running tests
        run: |
          echo "ipfs-1" && docker compose -p tosi-chain -f ${{ matrix.composefile }} exec ipfs-1 ipfs swarm peers
          echo "ipfs-2" && docker compose -p tosi-chain -f ${{ matrix.composefile }} exec ipfs-2 ipfs swarm peers
          echo "ipfs-3" && docker compose -p tosi-chain -f ${{ matrix.composefile }} exec ipfs-3 ipfs swarm peers
          echo "ipfs-4" && docker compose -p tosi-chain -f ${{ matrix.composefile }} exec ipfs-4 ipfs swarm peers
          echo "ipfs-5" && docker compose -p tosi-chain -f ${{ matrix.composefile }} exec ipfs-5 ipfs swarm peers
      - name: Run integration tests - tosi client
        run: |
          docker run --network=host test:1.0 yarn ${{ matrix.citest }}
      - name: Grab logs
        if: ${{ always() }}
        run: |
          docker compose -p tosi-chain -f ${{ matrix.composefile }} logs --timestamps &> logs.${{ matrix.composefile }}.${{ matrix.logfile }}.txt
          gzip -9 logs.${{ matrix.composefile }}.${{ matrix.logfile }}.txt
      - name: Upload integration logs
        uses: actions/upload-artifact@v2
        if: ${{ always() }}
        with:
          name: integration-logs.${{ matrix.composefile }}.${{ matrix.logfile }}
          path: logs.${{ matrix.composefile }}.${{ matrix.logfile }}.txt.gz
      - name: Stop the containers
        if: ${{ always() }}
        run: |
          docker compose -p tosi-chain -f ${{ matrix.composefile }} down || true
          docker compose -p tosi-chain -f ${{ matrix.composefile }} rm -f -s -v || true
