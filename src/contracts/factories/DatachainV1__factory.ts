/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type { DatachainV1, DatachainV1Interface } from "../DatachainV1";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "previousAdmin",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "newAdmin",
        type: "address",
      },
    ],
    name: "AdminChanged",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "beacon",
        type: "address",
      },
    ],
    name: "BeaconUpgraded",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [],
    name: "BlockSubmitted",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint8",
        name: "version",
        type: "uint8",
      },
    ],
    name: "Initialized",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "implementation",
        type: "address",
      },
    ],
    name: "Upgraded",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "blockIndex",
        type: "uint256",
      },
    ],
    name: "blockHash",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "blockNumber",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32[]",
        name: "hashes",
        type: "bytes32[]",
      },
    ],
    name: "calculateRootFromPowerOfTwo",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "coordinatorNode",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "blockIndex",
        type: "uint256",
      },
    ],
    name: "getBlockTimestamp",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getImplementation",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "blockIndex",
        type: "uint256",
      },
    ],
    name: "getMerkleHash",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_coordinatorNode",
        type: "address",
      },
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "latestBlockHash",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "previousVersion",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "proxiableUUID",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newCoordinatorNode",
        type: "address",
      },
    ],
    name: "setCoordinatorNode",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "_block",
        type: "bytes",
      },
    ],
    name: "submitBlock",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newImplementation",
        type: "address",
      },
    ],
    name: "upgradeTo",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newImplementation",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "upgradeToAndCall",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60a06040523060805234801561001457600080fd5b5061001d610022565b6100e2565b600054610100900460ff161561008e5760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff90811610156100e0576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b60805161164e6101196000396000818161034801528181610391015281816104190152818161045901526104d5015261164e6000f3fe6080604052600436106101095760003560e01c806385df51fd11610095578063c4d66de811610064578063c4d66de8146102a8578063d5107381146102c8578063db3d1ccf146102e8578063df857756146102fe578063f2fde38b1461031e57600080fd5b806385df51fd146102145780638da5cb5b14610241578063aaf10f4214610273578063b33232b01461028857600080fd5b806357e871e7116100dc57806357e871e7146101985780636c4f6ba9146101ae578063715018a6146101c45780637f350924146101d957806382b0eab8146101f457600080fd5b80633659cfe61461010e57806347e26f1a146101305780634f1ef2861461017057806352d1902d14610183575b600080fd5b34801561011a57600080fd5b5061012e6101293660046111ae565b61033e565b005b34801561013c57600080fd5b5061015d61014b3660046111c9565b600090815260ce602052604090205490565b6040519081526020015b60405180910390f35b61012e61017e366004611229565b61040f565b34801561018f57600080fd5b5061015d6104c8565b3480156101a457600080fd5b5061015d60c95481565b3480156101ba57600080fd5b5061015d60cb5481565b3480156101d057600080fd5b5061012e61057b565b3480156101e557600080fd5b5061015d6101093660046111c9565b34801561020057600080fd5b5061015d61020f3660046112cf565b61058f565b34801561022057600080fd5b5061015d61022f3660046111c9565b600090815260cc602052604090205490565b34801561024d57600080fd5b506033546001600160a01b03165b6040516001600160a01b039091168152602001610167565b34801561027f57600080fd5b5061025b610723565b34801561029457600080fd5b5061012e6102a33660046111ae565b610732565b3480156102b457600080fd5b5061012e6102c33660046111ae565b61075c565b3480156102d457600080fd5b5061012e6102e3366004611375565b610890565b3480156102f457600080fd5b5061015d60cf5481565b34801561030a57600080fd5b5060ca5461025b906001600160a01b031681565b34801561032a57600080fd5b5061012e6103393660046111ae565b610bfa565b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016300361038f5760405162461bcd60e51b8152600401610386906113e7565b60405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166103c1610c70565b6001600160a01b0316146103e75760405162461bcd60e51b815260040161038690611433565b6103f081610c8c565b6040805160008082526020820190925261040c91839190610c94565b50565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036104575760405162461bcd60e51b8152600401610386906113e7565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610489610c70565b6001600160a01b0316146104af5760405162461bcd60e51b815260040161038690611433565b6104b882610c8c565b6104c482826001610c94565b5050565b6000306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146105685760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c00000000000000006064820152608401610386565b506000805160206115d283398151915290565b610583610e04565b61058d6000610e5e565b565b600061059b8251610eb0565b6105e75760405162461bcd60e51b815260206004820152601860248201527f6172726179206c656e206e6f7420706f776572206f66203200000000000000006044820152606401610386565b815160010361061257816000815181106106035761060361147f565b60200260200101519050919050565b600060018351901c67ffffffffffffffff811115610632576106326111e2565b60405190808252806020026020018201604052801561065b578160200160208202803683370190505b50905060005b835181101561070d5783818151811061067c5761067c61147f565b60200260200101518482600161069291906114ab565b815181106106a2576106a261147f565b60200260200101516040516020016106c4929190918252602082015260400190565b6040516020818303038152906040528051906020012082600183901c815181106106f0576106f061147f565b60209081029190910101526107066002826114ab565b9050610661565b506107178161058f565b9392505050565b919050565b600061072d610c70565b905090565b61073a610e04565b60ca80546001600160a01b0319166001600160a01b0392909216919091179055565b600054610100900460ff161580801561077c5750600054600160ff909116105b806107965750303b158015610796575060005460ff166001145b6107f95760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610386565b6000805460ff19166001179055801561081c576000805461ff0019166101001790555b610824610ed6565b61082c610f05565b60ca80546001600160a01b0319166001600160a01b03841617905580156104c4576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15050565b60ca546001600160a01b031633146108fe5760405162461bcd60e51b815260206004820152602b60248201527f4f6e6c792074686520636f6f7264696e61746f72206e6f64652063616e20737560448201526a626d697420626c6f636b7360a81b6064820152608401610386565b8060048110156109505760405162461bcd60e51b815260206004820152601d60248201527f44617461206d757374206265206174206c6561737420342062797465730000006044820152606401610386565b6204000181106109a25760405162461bcd60e51b815260206004820152601c60248201527f426c6f636b2063616e6e6f74206265206265796f6e64203235366b62000000006044820152606401610386565b60cf54833590630801122003610acb57630801122060e082901c14610a095760405162461bcd60e51b815260206004820152601b60248201527f756e737570706f727465642076657273696f6e207570677261646500000000006044820152606401610386565b6024821015610a5a5760405162461bcd60e51b815260206004820152601e60248201527f44617461206d757374206265206174206c6561737420333620627974657300006044820152606401610386565b60cb546004850135908114610ac55760405162461bcd60e51b815260206004820152602b60248201527f50726576696f757320626c6f636b2068617368206d757374206265206571756160448201526a1b081d1bc81b185d195cdd60aa1b6064820152608401610386565b50610b77565b60cf54600003610b395760e081901c630801122003610af15760e081901c60cf55610b77565b60405162461bcd60e51b815260206004820152601b60248201527f756e737570706f727465642076657273696f6e207570677261646500000000006044820152606401610386565b60405162461bcd60e51b81526020600482015260136024820152723ab739bab83837b93a32b2103b32b939b4b7b760691b6044820152606401610386565b60c98054906000610b87836114be565b91905055508383604051610b9c9291906114d7565b6040805191829003822060cb81905560c98054600090815260cc6020908152848220939093559054815260ce9091529081204290557fcdf35dca8304861a13f78fcd9aa4cbe5bd689d13c643b4c875cccbfae3cbf67c91a150505050565b610c02610e04565b6001600160a01b038116610c675760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610386565b61040c81610e5e565b6000805160206115d2833981519152546001600160a01b031690565b61040c610e04565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1615610ccc57610cc783610f2c565b505050565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015610d26575060408051601f3d908101601f19168201909252610d23918101906114e7565b60015b610d895760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b6064820152608401610386565b6000805160206115d28339815191528114610df85760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b6064820152608401610386565b50610cc7838383610fc8565b6033546001600160a01b0316331461058d5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610386565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600081600003610ec257506000919050565b610ecd600183611500565b90911615919050565b600054610100900460ff16610efd5760405162461bcd60e51b815260040161038690611513565b61058d610ff3565b600054610100900460ff1661058d5760405162461bcd60e51b815260040161038690611513565b6001600160a01b0381163b610f995760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608401610386565b6000805160206115d283398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b610fd183611023565b600082511180610fde5750805b15610cc757610fed8383611063565b50505050565b600054610100900460ff1661101a5760405162461bcd60e51b815260040161038690611513565b61058d33610e5e565b61102c81610f2c565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606001600160a01b0383163b6110cb5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b6064820152608401610386565b600080846001600160a01b0316846040516110e69190611582565b600060405180830381855af49150503d8060008114611121576040519150601f19603f3d011682016040523d82523d6000602084013e611126565b606091505b509150915061114e82826040518060600160405280602781526020016115f260279139611159565b925050505b92915050565b60608315611168575081610717565b610717838381511561117d5781518083602001fd5b8060405162461bcd60e51b8152600401610386919061159e565b80356001600160a01b038116811461071e57600080fd5b6000602082840312156111c057600080fd5b61071782611197565b6000602082840312156111db57600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715611221576112216111e2565b604052919050565b6000806040838503121561123c57600080fd5b61124583611197565b915060208084013567ffffffffffffffff8082111561126357600080fd5b818601915086601f83011261127757600080fd5b813581811115611289576112896111e2565b61129b601f8201601f191685016111f8565b915080825287848285010111156112b157600080fd5b80848401858401376000848284010152508093505050509250929050565b600060208083850312156112e257600080fd5b823567ffffffffffffffff808211156112fa57600080fd5b818501915085601f83011261130e57600080fd5b813581811115611320576113206111e2565b8060051b91506113318483016111f8565b818152918301840191848101908884111561134b57600080fd5b938501935b8385101561136957843582529385019390850190611350565b98975050505050505050565b6000806020838503121561138857600080fd5b823567ffffffffffffffff808211156113a057600080fd5b818501915085601f8301126113b457600080fd5b8135818111156113c357600080fd5b8660208285010111156113d557600080fd5b60209290920196919550909350505050565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b8082018082111561115357611153611495565b6000600182016114d0576114d0611495565b5060010190565b8183823760009101908152919050565b6000602082840312156114f957600080fd5b5051919050565b8181038181111561115357611153611495565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b60005b83811015611579578181015183820152602001611561565b50506000910152565b6000825161159481846020870161155e565b9190910192915050565b60208152600082518060208401526115bd81604085016020870161155e565b601f01601f1916919091016040019291505056fe360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220810eb71ec9f2aa1a10fb5d7f8a3fbd87d91d004f6ce079eddb8935fd60a4787f64736f6c63430008130033";

type DatachainV1ConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: DatachainV1ConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class DatachainV1__factory extends ContractFactory {
  constructor(...args: DatachainV1ConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<DatachainV1> {
    return super.deploy(overrides || {}) as Promise<DatachainV1>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): DatachainV1 {
    return super.attach(address) as DatachainV1;
  }
  override connect(signer: Signer): DatachainV1__factory {
    return super.connect(signer) as DatachainV1__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): DatachainV1Interface {
    return new utils.Interface(_abi) as DatachainV1Interface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): DatachainV1 {
    return new Contract(address, _abi, signerOrProvider) as DatachainV1;
  }
}
