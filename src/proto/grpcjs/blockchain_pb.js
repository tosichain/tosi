// source: blockchain.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() {
  if (this) { return this; }
  if (typeof window !== 'undefined') { return window; }
  if (typeof global !== 'undefined') { return global; }
  if (typeof self !== 'undefined') { return self; }
  return Function('return this')();
}.call(null));

goog.exportSymbol('proto.blockchain.Account', null, global);
goog.exportSymbol('proto.blockchain.Block', null, global);
goog.exportSymbol('proto.blockchain.BlockMetadata', null, global);
goog.exportSymbol('proto.blockchain.BlockProof', null, global);
goog.exportSymbol('proto.blockchain.ClaimDACheckResult', null, global);
goog.exportSymbol('proto.blockchain.ClaimDataRef', null, global);
goog.exportSymbol('proto.blockchain.ClaimStateCheckResult', null, global);
goog.exportSymbol('proto.blockchain.ComputeClaim', null, global);
goog.exportSymbol('proto.blockchain.CreateDataChain', null, global);
goog.exportSymbol('proto.blockchain.DACheckResult', null, global);
goog.exportSymbol('proto.blockchain.DAInfo', null, global);
goog.exportSymbol('proto.blockchain.DataChain', null, global);
goog.exportSymbol('proto.blockchain.MintToken', null, global);
goog.exportSymbol('proto.blockchain.SignedTransaction', null, global);
goog.exportSymbol('proto.blockchain.StakePool', null, global);
goog.exportSymbol('proto.blockchain.StakeToken', null, global);
goog.exportSymbol('proto.blockchain.StakeType', null, global);
goog.exportSymbol('proto.blockchain.StateCheckResult', null, global);
goog.exportSymbol('proto.blockchain.Transaction', null, global);
goog.exportSymbol('proto.blockchain.TransactionBundle', null, global);
goog.exportSymbol('proto.blockchain.TransferToken', null, global);
goog.exportSymbol('proto.blockchain.UnstakeToken', null, global);
goog.exportSymbol('proto.blockchain.UpdateDataChain', null, global);
goog.exportSymbol('proto.blockchain.WorldState', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.blockchain.SignedTransaction = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.blockchain.SignedTransaction, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.blockchain.SignedTransaction.displayName = 'proto.blockchain.SignedTransaction';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.blockchain.Transaction = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.blockchain.Transaction, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.blockchain.Transaction.displayName = 'proto.blockchain.Transaction';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.blockchain.MintToken = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.blockchain.MintToken, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.blockchain.MintToken.displayName = 'proto.blockchain.MintToken';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.blockchain.TransferToken = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.blockchain.TransferToken, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.blockchain.TransferToken.displayName = 'proto.blockchain.TransferToken';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.blockchain.StakeToken = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.blockchain.StakeToken, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.blockchain.StakeToken.displayName = 'proto.blockchain.StakeToken';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.blockchain.UnstakeToken = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.blockchain.UnstakeToken, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.blockchain.UnstakeToken.displayName = 'proto.blockchain.UnstakeToken';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.blockchain.CreateDataChain = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.blockchain.CreateDataChain, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.blockchain.CreateDataChain.displayName = 'proto.blockchain.CreateDataChain';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.blockchain.UpdateDataChain = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.blockchain.UpdateDataChain, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.blockchain.UpdateDataChain.displayName = 'proto.blockchain.UpdateDataChain';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.blockchain.WorldState = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.blockchain.WorldState.repeatedFields_, null);
};
goog.inherits(proto.blockchain.WorldState, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.blockchain.WorldState.displayName = 'proto.blockchain.WorldState';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.blockchain.Account = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.blockchain.Account, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.blockchain.Account.displayName = 'proto.blockchain.Account';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.blockchain.StakePool = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.blockchain.StakePool.repeatedFields_, null);
};
goog.inherits(proto.blockchain.StakePool, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.blockchain.StakePool.displayName = 'proto.blockchain.StakePool';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.blockchain.DataChain = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.blockchain.DataChain.repeatedFields_, null);
};
goog.inherits(proto.blockchain.DataChain, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.blockchain.DataChain.displayName = 'proto.blockchain.DataChain';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.blockchain.ComputeClaim = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.blockchain.ComputeClaim, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.blockchain.ComputeClaim.displayName = 'proto.blockchain.ComputeClaim';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.blockchain.ClaimDataRef = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.blockchain.ClaimDataRef, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.blockchain.ClaimDataRef.displayName = 'proto.blockchain.ClaimDataRef';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.blockchain.DAInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.blockchain.DAInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.blockchain.DAInfo.displayName = 'proto.blockchain.DAInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.blockchain.Block = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.blockchain.Block.repeatedFields_, null);
};
goog.inherits(proto.blockchain.Block, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.blockchain.Block.displayName = 'proto.blockchain.Block';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.blockchain.BlockProof = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.blockchain.BlockProof.repeatedFields_, null);
};
goog.inherits(proto.blockchain.BlockProof, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.blockchain.BlockProof.displayName = 'proto.blockchain.BlockProof';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.blockchain.DACheckResult = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.blockchain.DACheckResult.repeatedFields_, null);
};
goog.inherits(proto.blockchain.DACheckResult, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.blockchain.DACheckResult.displayName = 'proto.blockchain.DACheckResult';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.blockchain.StateCheckResult = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.blockchain.StateCheckResult.repeatedFields_, null);
};
goog.inherits(proto.blockchain.StateCheckResult, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.blockchain.StateCheckResult.displayName = 'proto.blockchain.StateCheckResult';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.blockchain.ClaimDACheckResult = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.blockchain.ClaimDACheckResult, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.blockchain.ClaimDACheckResult.displayName = 'proto.blockchain.ClaimDACheckResult';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.blockchain.ClaimStateCheckResult = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.blockchain.ClaimStateCheckResult, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.blockchain.ClaimStateCheckResult.displayName = 'proto.blockchain.ClaimStateCheckResult';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.blockchain.TransactionBundle = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.blockchain.TransactionBundle.repeatedFields_, null);
};
goog.inherits(proto.blockchain.TransactionBundle, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.blockchain.TransactionBundle.displayName = 'proto.blockchain.TransactionBundle';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.blockchain.BlockMetadata = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.blockchain.BlockMetadata, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.blockchain.BlockMetadata.displayName = 'proto.blockchain.BlockMetadata';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.blockchain.SignedTransaction.prototype.toObject = function(opt_includeInstance) {
  return proto.blockchain.SignedTransaction.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.blockchain.SignedTransaction} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.blockchain.SignedTransaction.toObject = function(includeInstance, msg) {
  var f, obj = {
    from: msg.getFrom_asB64(),
    signature: msg.getSignature_asB64(),
    txn: (f = msg.getTxn()) && proto.blockchain.Transaction.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.blockchain.SignedTransaction}
 */
proto.blockchain.SignedTransaction.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.blockchain.SignedTransaction;
  return proto.blockchain.SignedTransaction.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.blockchain.SignedTransaction} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.blockchain.SignedTransaction}
 */
proto.blockchain.SignedTransaction.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setFrom(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSignature(value);
      break;
    case 3:
      var value = new proto.blockchain.Transaction;
      reader.readMessage(value,proto.blockchain.Transaction.deserializeBinaryFromReader);
      msg.setTxn(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.blockchain.SignedTransaction.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.blockchain.SignedTransaction.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.blockchain.SignedTransaction} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.blockchain.SignedTransaction.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFrom_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getSignature_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getTxn();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.blockchain.Transaction.serializeBinaryToWriter
    );
  }
};


/**
 * optional bytes from = 1;
 * @return {!(string|Uint8Array)}
 */
proto.blockchain.SignedTransaction.prototype.getFrom = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes from = 1;
 * This is a type-conversion wrapper around `getFrom()`
 * @return {string}
 */
proto.blockchain.SignedTransaction.prototype.getFrom_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getFrom()));
};


/**
 * optional bytes from = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getFrom()`
 * @return {!Uint8Array}
 */
proto.blockchain.SignedTransaction.prototype.getFrom_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getFrom()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.blockchain.SignedTransaction} returns this
 */
proto.blockchain.SignedTransaction.prototype.setFrom = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes signature = 2;
 * @return {!(string|Uint8Array)}
 */
proto.blockchain.SignedTransaction.prototype.getSignature = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes signature = 2;
 * This is a type-conversion wrapper around `getSignature()`
 * @return {string}
 */
proto.blockchain.SignedTransaction.prototype.getSignature_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSignature()));
};


/**
 * optional bytes signature = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSignature()`
 * @return {!Uint8Array}
 */
proto.blockchain.SignedTransaction.prototype.getSignature_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSignature()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.blockchain.SignedTransaction} returns this
 */
proto.blockchain.SignedTransaction.prototype.setSignature = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional Transaction txn = 3;
 * @return {?proto.blockchain.Transaction}
 */
proto.blockchain.SignedTransaction.prototype.getTxn = function() {
  return /** @type{?proto.blockchain.Transaction} */ (
    jspb.Message.getWrapperField(this, proto.blockchain.Transaction, 3));
};


/**
 * @param {?proto.blockchain.Transaction|undefined} value
 * @return {!proto.blockchain.SignedTransaction} returns this
*/
proto.blockchain.SignedTransaction.prototype.setTxn = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.blockchain.SignedTransaction} returns this
 */
proto.blockchain.SignedTransaction.prototype.clearTxn = function() {
  return this.setTxn(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.blockchain.SignedTransaction.prototype.hasTxn = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.blockchain.Transaction.prototype.toObject = function(opt_includeInstance) {
  return proto.blockchain.Transaction.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.blockchain.Transaction} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.blockchain.Transaction.toObject = function(includeInstance, msg) {
  var f, obj = {
    mint: (f = msg.getMint()) && proto.blockchain.MintToken.toObject(includeInstance, f),
    transfer: (f = msg.getTransfer()) && proto.blockchain.TransferToken.toObject(includeInstance, f),
    stake: (f = msg.getStake()) && proto.blockchain.StakeToken.toObject(includeInstance, f),
    unstake: (f = msg.getUnstake()) && proto.blockchain.UnstakeToken.toObject(includeInstance, f),
    createChain: (f = msg.getCreateChain()) && proto.blockchain.CreateDataChain.toObject(includeInstance, f),
    updateChain: (f = msg.getUpdateChain()) && proto.blockchain.UpdateDataChain.toObject(includeInstance, f),
    nonce: jspb.Message.getFieldWithDefault(msg, 7, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.blockchain.Transaction}
 */
proto.blockchain.Transaction.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.blockchain.Transaction;
  return proto.blockchain.Transaction.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.blockchain.Transaction} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.blockchain.Transaction}
 */
proto.blockchain.Transaction.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.blockchain.MintToken;
      reader.readMessage(value,proto.blockchain.MintToken.deserializeBinaryFromReader);
      msg.setMint(value);
      break;
    case 2:
      var value = new proto.blockchain.TransferToken;
      reader.readMessage(value,proto.blockchain.TransferToken.deserializeBinaryFromReader);
      msg.setTransfer(value);
      break;
    case 3:
      var value = new proto.blockchain.StakeToken;
      reader.readMessage(value,proto.blockchain.StakeToken.deserializeBinaryFromReader);
      msg.setStake(value);
      break;
    case 4:
      var value = new proto.blockchain.UnstakeToken;
      reader.readMessage(value,proto.blockchain.UnstakeToken.deserializeBinaryFromReader);
      msg.setUnstake(value);
      break;
    case 5:
      var value = new proto.blockchain.CreateDataChain;
      reader.readMessage(value,proto.blockchain.CreateDataChain.deserializeBinaryFromReader);
      msg.setCreateChain(value);
      break;
    case 6:
      var value = new proto.blockchain.UpdateDataChain;
      reader.readMessage(value,proto.blockchain.UpdateDataChain.deserializeBinaryFromReader);
      msg.setUpdateChain(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setNonce(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.blockchain.Transaction.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.blockchain.Transaction.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.blockchain.Transaction} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.blockchain.Transaction.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMint();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.blockchain.MintToken.serializeBinaryToWriter
    );
  }
  f = message.getTransfer();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.blockchain.TransferToken.serializeBinaryToWriter
    );
  }
  f = message.getStake();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.blockchain.StakeToken.serializeBinaryToWriter
    );
  }
  f = message.getUnstake();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.blockchain.UnstakeToken.serializeBinaryToWriter
    );
  }
  f = message.getCreateChain();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.blockchain.CreateDataChain.serializeBinaryToWriter
    );
  }
  f = message.getUpdateChain();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.blockchain.UpdateDataChain.serializeBinaryToWriter
    );
  }
  f = message.getNonce();
  if (f !== 0) {
    writer.writeUint32(
      7,
      f
    );
  }
};


/**
 * optional MintToken mint = 1;
 * @return {?proto.blockchain.MintToken}
 */
proto.blockchain.Transaction.prototype.getMint = function() {
  return /** @type{?proto.blockchain.MintToken} */ (
    jspb.Message.getWrapperField(this, proto.blockchain.MintToken, 1));
};


/**
 * @param {?proto.blockchain.MintToken|undefined} value
 * @return {!proto.blockchain.Transaction} returns this
*/
proto.blockchain.Transaction.prototype.setMint = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.blockchain.Transaction} returns this
 */
proto.blockchain.Transaction.prototype.clearMint = function() {
  return this.setMint(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.blockchain.Transaction.prototype.hasMint = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional TransferToken transfer = 2;
 * @return {?proto.blockchain.TransferToken}
 */
proto.blockchain.Transaction.prototype.getTransfer = function() {
  return /** @type{?proto.blockchain.TransferToken} */ (
    jspb.Message.getWrapperField(this, proto.blockchain.TransferToken, 2));
};


/**
 * @param {?proto.blockchain.TransferToken|undefined} value
 * @return {!proto.blockchain.Transaction} returns this
*/
proto.blockchain.Transaction.prototype.setTransfer = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.blockchain.Transaction} returns this
 */
proto.blockchain.Transaction.prototype.clearTransfer = function() {
  return this.setTransfer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.blockchain.Transaction.prototype.hasTransfer = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional StakeToken stake = 3;
 * @return {?proto.blockchain.StakeToken}
 */
proto.blockchain.Transaction.prototype.getStake = function() {
  return /** @type{?proto.blockchain.StakeToken} */ (
    jspb.Message.getWrapperField(this, proto.blockchain.StakeToken, 3));
};


/**
 * @param {?proto.blockchain.StakeToken|undefined} value
 * @return {!proto.blockchain.Transaction} returns this
*/
proto.blockchain.Transaction.prototype.setStake = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.blockchain.Transaction} returns this
 */
proto.blockchain.Transaction.prototype.clearStake = function() {
  return this.setStake(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.blockchain.Transaction.prototype.hasStake = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional UnstakeToken unstake = 4;
 * @return {?proto.blockchain.UnstakeToken}
 */
proto.blockchain.Transaction.prototype.getUnstake = function() {
  return /** @type{?proto.blockchain.UnstakeToken} */ (
    jspb.Message.getWrapperField(this, proto.blockchain.UnstakeToken, 4));
};


/**
 * @param {?proto.blockchain.UnstakeToken|undefined} value
 * @return {!proto.blockchain.Transaction} returns this
*/
proto.blockchain.Transaction.prototype.setUnstake = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.blockchain.Transaction} returns this
 */
proto.blockchain.Transaction.prototype.clearUnstake = function() {
  return this.setUnstake(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.blockchain.Transaction.prototype.hasUnstake = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional CreateDataChain create_chain = 5;
 * @return {?proto.blockchain.CreateDataChain}
 */
proto.blockchain.Transaction.prototype.getCreateChain = function() {
  return /** @type{?proto.blockchain.CreateDataChain} */ (
    jspb.Message.getWrapperField(this, proto.blockchain.CreateDataChain, 5));
};


/**
 * @param {?proto.blockchain.CreateDataChain|undefined} value
 * @return {!proto.blockchain.Transaction} returns this
*/
proto.blockchain.Transaction.prototype.setCreateChain = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.blockchain.Transaction} returns this
 */
proto.blockchain.Transaction.prototype.clearCreateChain = function() {
  return this.setCreateChain(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.blockchain.Transaction.prototype.hasCreateChain = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional UpdateDataChain update_chain = 6;
 * @return {?proto.blockchain.UpdateDataChain}
 */
proto.blockchain.Transaction.prototype.getUpdateChain = function() {
  return /** @type{?proto.blockchain.UpdateDataChain} */ (
    jspb.Message.getWrapperField(this, proto.blockchain.UpdateDataChain, 6));
};


/**
 * @param {?proto.blockchain.UpdateDataChain|undefined} value
 * @return {!proto.blockchain.Transaction} returns this
*/
proto.blockchain.Transaction.prototype.setUpdateChain = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.blockchain.Transaction} returns this
 */
proto.blockchain.Transaction.prototype.clearUpdateChain = function() {
  return this.setUpdateChain(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.blockchain.Transaction.prototype.hasUpdateChain = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional uint32 nonce = 7;
 * @return {number}
 */
proto.blockchain.Transaction.prototype.getNonce = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.blockchain.Transaction} returns this
 */
proto.blockchain.Transaction.prototype.setNonce = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.blockchain.MintToken.prototype.toObject = function(opt_includeInstance) {
  return proto.blockchain.MintToken.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.blockchain.MintToken} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.blockchain.MintToken.toObject = function(includeInstance, msg) {
  var f, obj = {
    receiver: msg.getReceiver_asB64(),
    amount: jspb.Message.getFieldWithDefault(msg, 2, "0")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.blockchain.MintToken}
 */
proto.blockchain.MintToken.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.blockchain.MintToken;
  return proto.blockchain.MintToken.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.blockchain.MintToken} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.blockchain.MintToken}
 */
proto.blockchain.MintToken.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setReceiver(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readUint64String());
      msg.setAmount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.blockchain.MintToken.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.blockchain.MintToken.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.blockchain.MintToken} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.blockchain.MintToken.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getReceiver_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getAmount();
  if (parseInt(f, 10) !== 0) {
    writer.writeUint64String(
      2,
      f
    );
  }
};


/**
 * optional bytes receiver = 1;
 * @return {!(string|Uint8Array)}
 */
proto.blockchain.MintToken.prototype.getReceiver = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes receiver = 1;
 * This is a type-conversion wrapper around `getReceiver()`
 * @return {string}
 */
proto.blockchain.MintToken.prototype.getReceiver_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getReceiver()));
};


/**
 * optional bytes receiver = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getReceiver()`
 * @return {!Uint8Array}
 */
proto.blockchain.MintToken.prototype.getReceiver_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getReceiver()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.blockchain.MintToken} returns this
 */
proto.blockchain.MintToken.prototype.setReceiver = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional uint64 amount = 2;
 * @return {string}
 */
proto.blockchain.MintToken.prototype.getAmount = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, "0"));
};


/**
 * @param {string} value
 * @return {!proto.blockchain.MintToken} returns this
 */
proto.blockchain.MintToken.prototype.setAmount = function(value) {
  return jspb.Message.setProto3StringIntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.blockchain.TransferToken.prototype.toObject = function(opt_includeInstance) {
  return proto.blockchain.TransferToken.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.blockchain.TransferToken} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.blockchain.TransferToken.toObject = function(includeInstance, msg) {
  var f, obj = {
    receiver: msg.getReceiver_asB64(),
    amount: jspb.Message.getFieldWithDefault(msg, 2, "0")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.blockchain.TransferToken}
 */
proto.blockchain.TransferToken.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.blockchain.TransferToken;
  return proto.blockchain.TransferToken.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.blockchain.TransferToken} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.blockchain.TransferToken}
 */
proto.blockchain.TransferToken.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setReceiver(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readUint64String());
      msg.setAmount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.blockchain.TransferToken.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.blockchain.TransferToken.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.blockchain.TransferToken} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.blockchain.TransferToken.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getReceiver_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getAmount();
  if (parseInt(f, 10) !== 0) {
    writer.writeUint64String(
      2,
      f
    );
  }
};


/**
 * optional bytes receiver = 1;
 * @return {!(string|Uint8Array)}
 */
proto.blockchain.TransferToken.prototype.getReceiver = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes receiver = 1;
 * This is a type-conversion wrapper around `getReceiver()`
 * @return {string}
 */
proto.blockchain.TransferToken.prototype.getReceiver_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getReceiver()));
};


/**
 * optional bytes receiver = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getReceiver()`
 * @return {!Uint8Array}
 */
proto.blockchain.TransferToken.prototype.getReceiver_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getReceiver()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.blockchain.TransferToken} returns this
 */
proto.blockchain.TransferToken.prototype.setReceiver = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional uint64 amount = 2;
 * @return {string}
 */
proto.blockchain.TransferToken.prototype.getAmount = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, "0"));
};


/**
 * @param {string} value
 * @return {!proto.blockchain.TransferToken} returns this
 */
proto.blockchain.TransferToken.prototype.setAmount = function(value) {
  return jspb.Message.setProto3StringIntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.blockchain.StakeToken.prototype.toObject = function(opt_includeInstance) {
  return proto.blockchain.StakeToken.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.blockchain.StakeToken} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.blockchain.StakeToken.toObject = function(includeInstance, msg) {
  var f, obj = {
    stakeType: jspb.Message.getFieldWithDefault(msg, 1, 0),
    amount: jspb.Message.getFieldWithDefault(msg, 2, "0")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.blockchain.StakeToken}
 */
proto.blockchain.StakeToken.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.blockchain.StakeToken;
  return proto.blockchain.StakeToken.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.blockchain.StakeToken} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.blockchain.StakeToken}
 */
proto.blockchain.StakeToken.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.blockchain.StakeType} */ (reader.readEnum());
      msg.setStakeType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readUint64String());
      msg.setAmount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.blockchain.StakeToken.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.blockchain.StakeToken.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.blockchain.StakeToken} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.blockchain.StakeToken.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStakeType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getAmount();
  if (parseInt(f, 10) !== 0) {
    writer.writeUint64String(
      2,
      f
    );
  }
};


/**
 * optional StakeType stake_type = 1;
 * @return {!proto.blockchain.StakeType}
 */
proto.blockchain.StakeToken.prototype.getStakeType = function() {
  return /** @type {!proto.blockchain.StakeType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.blockchain.StakeType} value
 * @return {!proto.blockchain.StakeToken} returns this
 */
proto.blockchain.StakeToken.prototype.setStakeType = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional uint64 amount = 2;
 * @return {string}
 */
proto.blockchain.StakeToken.prototype.getAmount = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, "0"));
};


/**
 * @param {string} value
 * @return {!proto.blockchain.StakeToken} returns this
 */
proto.blockchain.StakeToken.prototype.setAmount = function(value) {
  return jspb.Message.setProto3StringIntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.blockchain.UnstakeToken.prototype.toObject = function(opt_includeInstance) {
  return proto.blockchain.UnstakeToken.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.blockchain.UnstakeToken} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.blockchain.UnstakeToken.toObject = function(includeInstance, msg) {
  var f, obj = {
    stakeType: jspb.Message.getFieldWithDefault(msg, 1, 0),
    amount: jspb.Message.getFieldWithDefault(msg, 2, "0")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.blockchain.UnstakeToken}
 */
proto.blockchain.UnstakeToken.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.blockchain.UnstakeToken;
  return proto.blockchain.UnstakeToken.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.blockchain.UnstakeToken} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.blockchain.UnstakeToken}
 */
proto.blockchain.UnstakeToken.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.blockchain.StakeType} */ (reader.readEnum());
      msg.setStakeType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readUint64String());
      msg.setAmount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.blockchain.UnstakeToken.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.blockchain.UnstakeToken.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.blockchain.UnstakeToken} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.blockchain.UnstakeToken.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStakeType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getAmount();
  if (parseInt(f, 10) !== 0) {
    writer.writeUint64String(
      2,
      f
    );
  }
};


/**
 * optional StakeType stake_type = 1;
 * @return {!proto.blockchain.StakeType}
 */
proto.blockchain.UnstakeToken.prototype.getStakeType = function() {
  return /** @type {!proto.blockchain.StakeType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.blockchain.StakeType} value
 * @return {!proto.blockchain.UnstakeToken} returns this
 */
proto.blockchain.UnstakeToken.prototype.setStakeType = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional uint64 amount = 2;
 * @return {string}
 */
proto.blockchain.UnstakeToken.prototype.getAmount = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, "0"));
};


/**
 * @param {string} value
 * @return {!proto.blockchain.UnstakeToken} returns this
 */
proto.blockchain.UnstakeToken.prototype.setAmount = function(value) {
  return jspb.Message.setProto3StringIntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.blockchain.CreateDataChain.prototype.toObject = function(opt_includeInstance) {
  return proto.blockchain.CreateDataChain.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.blockchain.CreateDataChain} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.blockchain.CreateDataChain.toObject = function(includeInstance, msg) {
  var f, obj = {
    rootClaim: (f = msg.getRootClaim()) && proto.blockchain.ComputeClaim.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.blockchain.CreateDataChain}
 */
proto.blockchain.CreateDataChain.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.blockchain.CreateDataChain;
  return proto.blockchain.CreateDataChain.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.blockchain.CreateDataChain} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.blockchain.CreateDataChain}
 */
proto.blockchain.CreateDataChain.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.blockchain.ComputeClaim;
      reader.readMessage(value,proto.blockchain.ComputeClaim.deserializeBinaryFromReader);
      msg.setRootClaim(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.blockchain.CreateDataChain.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.blockchain.CreateDataChain.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.blockchain.CreateDataChain} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.blockchain.CreateDataChain.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRootClaim();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.blockchain.ComputeClaim.serializeBinaryToWriter
    );
  }
};


/**
 * optional ComputeClaim root_claim = 1;
 * @return {?proto.blockchain.ComputeClaim}
 */
proto.blockchain.CreateDataChain.prototype.getRootClaim = function() {
  return /** @type{?proto.blockchain.ComputeClaim} */ (
    jspb.Message.getWrapperField(this, proto.blockchain.ComputeClaim, 1));
};


/**
 * @param {?proto.blockchain.ComputeClaim|undefined} value
 * @return {!proto.blockchain.CreateDataChain} returns this
*/
proto.blockchain.CreateDataChain.prototype.setRootClaim = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.blockchain.CreateDataChain} returns this
 */
proto.blockchain.CreateDataChain.prototype.clearRootClaim = function() {
  return this.setRootClaim(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.blockchain.CreateDataChain.prototype.hasRootClaim = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.blockchain.UpdateDataChain.prototype.toObject = function(opt_includeInstance) {
  return proto.blockchain.UpdateDataChain.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.blockchain.UpdateDataChain} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.blockchain.UpdateDataChain.toObject = function(includeInstance, msg) {
  var f, obj = {
    rootClaimHash: msg.getRootClaimHash_asB64(),
    claim: (f = msg.getClaim()) && proto.blockchain.ComputeClaim.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.blockchain.UpdateDataChain}
 */
proto.blockchain.UpdateDataChain.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.blockchain.UpdateDataChain;
  return proto.blockchain.UpdateDataChain.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.blockchain.UpdateDataChain} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.blockchain.UpdateDataChain}
 */
proto.blockchain.UpdateDataChain.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setRootClaimHash(value);
      break;
    case 2:
      var value = new proto.blockchain.ComputeClaim;
      reader.readMessage(value,proto.blockchain.ComputeClaim.deserializeBinaryFromReader);
      msg.setClaim(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.blockchain.UpdateDataChain.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.blockchain.UpdateDataChain.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.blockchain.UpdateDataChain} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.blockchain.UpdateDataChain.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRootClaimHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getClaim();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.blockchain.ComputeClaim.serializeBinaryToWriter
    );
  }
};


/**
 * optional bytes root_claim_hash = 1;
 * @return {!(string|Uint8Array)}
 */
proto.blockchain.UpdateDataChain.prototype.getRootClaimHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes root_claim_hash = 1;
 * This is a type-conversion wrapper around `getRootClaimHash()`
 * @return {string}
 */
proto.blockchain.UpdateDataChain.prototype.getRootClaimHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getRootClaimHash()));
};


/**
 * optional bytes root_claim_hash = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getRootClaimHash()`
 * @return {!Uint8Array}
 */
proto.blockchain.UpdateDataChain.prototype.getRootClaimHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getRootClaimHash()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.blockchain.UpdateDataChain} returns this
 */
proto.blockchain.UpdateDataChain.prototype.setRootClaimHash = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional ComputeClaim claim = 2;
 * @return {?proto.blockchain.ComputeClaim}
 */
proto.blockchain.UpdateDataChain.prototype.getClaim = function() {
  return /** @type{?proto.blockchain.ComputeClaim} */ (
    jspb.Message.getWrapperField(this, proto.blockchain.ComputeClaim, 2));
};


/**
 * @param {?proto.blockchain.ComputeClaim|undefined} value
 * @return {!proto.blockchain.UpdateDataChain} returns this
*/
proto.blockchain.UpdateDataChain.prototype.setClaim = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.blockchain.UpdateDataChain} returns this
 */
proto.blockchain.UpdateDataChain.prototype.clearClaim = function() {
  return this.setClaim(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.blockchain.UpdateDataChain.prototype.hasClaim = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.blockchain.WorldState.repeatedFields_ = [1,4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.blockchain.WorldState.prototype.toObject = function(opt_includeInstance) {
  return proto.blockchain.WorldState.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.blockchain.WorldState} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.blockchain.WorldState.toObject = function(includeInstance, msg) {
  var f, obj = {
    accountsList: jspb.Message.toObjectList(msg.getAccountsList(),
    proto.blockchain.Account.toObject, includeInstance),
    stakePool: (f = msg.getStakePool()) && proto.blockchain.StakePool.toObject(includeInstance, f),
    minter: msg.getMinter_asB64(),
    dataChainsList: jspb.Message.toObjectList(msg.getDataChainsList(),
    proto.blockchain.DataChain.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.blockchain.WorldState}
 */
proto.blockchain.WorldState.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.blockchain.WorldState;
  return proto.blockchain.WorldState.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.blockchain.WorldState} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.blockchain.WorldState}
 */
proto.blockchain.WorldState.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.blockchain.Account;
      reader.readMessage(value,proto.blockchain.Account.deserializeBinaryFromReader);
      msg.addAccounts(value);
      break;
    case 2:
      var value = new proto.blockchain.StakePool;
      reader.readMessage(value,proto.blockchain.StakePool.deserializeBinaryFromReader);
      msg.setStakePool(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setMinter(value);
      break;
    case 4:
      var value = new proto.blockchain.DataChain;
      reader.readMessage(value,proto.blockchain.DataChain.deserializeBinaryFromReader);
      msg.addDataChains(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.blockchain.WorldState.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.blockchain.WorldState.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.blockchain.WorldState} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.blockchain.WorldState.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAccountsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.blockchain.Account.serializeBinaryToWriter
    );
  }
  f = message.getStakePool();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.blockchain.StakePool.serializeBinaryToWriter
    );
  }
  f = message.getMinter_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getDataChainsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.blockchain.DataChain.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Account accounts = 1;
 * @return {!Array<!proto.blockchain.Account>}
 */
proto.blockchain.WorldState.prototype.getAccountsList = function() {
  return /** @type{!Array<!proto.blockchain.Account>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.blockchain.Account, 1));
};


/**
 * @param {!Array<!proto.blockchain.Account>} value
 * @return {!proto.blockchain.WorldState} returns this
*/
proto.blockchain.WorldState.prototype.setAccountsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.blockchain.Account=} opt_value
 * @param {number=} opt_index
 * @return {!proto.blockchain.Account}
 */
proto.blockchain.WorldState.prototype.addAccounts = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.blockchain.Account, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.blockchain.WorldState} returns this
 */
proto.blockchain.WorldState.prototype.clearAccountsList = function() {
  return this.setAccountsList([]);
};


/**
 * optional StakePool stake_pool = 2;
 * @return {?proto.blockchain.StakePool}
 */
proto.blockchain.WorldState.prototype.getStakePool = function() {
  return /** @type{?proto.blockchain.StakePool} */ (
    jspb.Message.getWrapperField(this, proto.blockchain.StakePool, 2));
};


/**
 * @param {?proto.blockchain.StakePool|undefined} value
 * @return {!proto.blockchain.WorldState} returns this
*/
proto.blockchain.WorldState.prototype.setStakePool = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.blockchain.WorldState} returns this
 */
proto.blockchain.WorldState.prototype.clearStakePool = function() {
  return this.setStakePool(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.blockchain.WorldState.prototype.hasStakePool = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional bytes minter = 3;
 * @return {!(string|Uint8Array)}
 */
proto.blockchain.WorldState.prototype.getMinter = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes minter = 3;
 * This is a type-conversion wrapper around `getMinter()`
 * @return {string}
 */
proto.blockchain.WorldState.prototype.getMinter_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getMinter()));
};


/**
 * optional bytes minter = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getMinter()`
 * @return {!Uint8Array}
 */
proto.blockchain.WorldState.prototype.getMinter_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getMinter()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.blockchain.WorldState} returns this
 */
proto.blockchain.WorldState.prototype.setMinter = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * repeated DataChain data_chains = 4;
 * @return {!Array<!proto.blockchain.DataChain>}
 */
proto.blockchain.WorldState.prototype.getDataChainsList = function() {
  return /** @type{!Array<!proto.blockchain.DataChain>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.blockchain.DataChain, 4));
};


/**
 * @param {!Array<!proto.blockchain.DataChain>} value
 * @return {!proto.blockchain.WorldState} returns this
*/
proto.blockchain.WorldState.prototype.setDataChainsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.blockchain.DataChain=} opt_value
 * @param {number=} opt_index
 * @return {!proto.blockchain.DataChain}
 */
proto.blockchain.WorldState.prototype.addDataChains = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.blockchain.DataChain, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.blockchain.WorldState} returns this
 */
proto.blockchain.WorldState.prototype.clearDataChainsList = function() {
  return this.setDataChainsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.blockchain.Account.prototype.toObject = function(opt_includeInstance) {
  return proto.blockchain.Account.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.blockchain.Account} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.blockchain.Account.toObject = function(includeInstance, msg) {
  var f, obj = {
    address: msg.getAddress_asB64(),
    nonce: jspb.Message.getFieldWithDefault(msg, 2, 0),
    balance: jspb.Message.getFieldWithDefault(msg, 3, "0"),
    daVerifierStake: jspb.Message.getFieldWithDefault(msg, 4, "0"),
    stateVerifierStake: jspb.Message.getFieldWithDefault(msg, 5, "0")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.blockchain.Account}
 */
proto.blockchain.Account.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.blockchain.Account;
  return proto.blockchain.Account.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.blockchain.Account} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.blockchain.Account}
 */
proto.blockchain.Account.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAddress(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setNonce(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readUint64String());
      msg.setBalance(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readUint64String());
      msg.setDaVerifierStake(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readUint64String());
      msg.setStateVerifierStake(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.blockchain.Account.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.blockchain.Account.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.blockchain.Account} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.blockchain.Account.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAddress_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getNonce();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getBalance();
  if (parseInt(f, 10) !== 0) {
    writer.writeUint64String(
      3,
      f
    );
  }
  f = message.getDaVerifierStake();
  if (parseInt(f, 10) !== 0) {
    writer.writeUint64String(
      4,
      f
    );
  }
  f = message.getStateVerifierStake();
  if (parseInt(f, 10) !== 0) {
    writer.writeUint64String(
      5,
      f
    );
  }
};


/**
 * optional bytes address = 1;
 * @return {!(string|Uint8Array)}
 */
proto.blockchain.Account.prototype.getAddress = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes address = 1;
 * This is a type-conversion wrapper around `getAddress()`
 * @return {string}
 */
proto.blockchain.Account.prototype.getAddress_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAddress()));
};


/**
 * optional bytes address = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAddress()`
 * @return {!Uint8Array}
 */
proto.blockchain.Account.prototype.getAddress_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAddress()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.blockchain.Account} returns this
 */
proto.blockchain.Account.prototype.setAddress = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional int32 nonce = 2;
 * @return {number}
 */
proto.blockchain.Account.prototype.getNonce = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.blockchain.Account} returns this
 */
proto.blockchain.Account.prototype.setNonce = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint64 balance = 3;
 * @return {string}
 */
proto.blockchain.Account.prototype.getBalance = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, "0"));
};


/**
 * @param {string} value
 * @return {!proto.blockchain.Account} returns this
 */
proto.blockchain.Account.prototype.setBalance = function(value) {
  return jspb.Message.setProto3StringIntField(this, 3, value);
};


/**
 * optional uint64 da_verifier_stake = 4;
 * @return {string}
 */
proto.blockchain.Account.prototype.getDaVerifierStake = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, "0"));
};


/**
 * @param {string} value
 * @return {!proto.blockchain.Account} returns this
 */
proto.blockchain.Account.prototype.setDaVerifierStake = function(value) {
  return jspb.Message.setProto3StringIntField(this, 4, value);
};


/**
 * optional uint64 state_verifier_stake = 5;
 * @return {string}
 */
proto.blockchain.Account.prototype.getStateVerifierStake = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, "0"));
};


/**
 * @param {string} value
 * @return {!proto.blockchain.Account} returns this
 */
proto.blockchain.Account.prototype.setStateVerifierStake = function(value) {
  return jspb.Message.setProto3StringIntField(this, 5, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.blockchain.StakePool.repeatedFields_ = [2,4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.blockchain.StakePool.prototype.toObject = function(opt_includeInstance) {
  return proto.blockchain.StakePool.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.blockchain.StakePool} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.blockchain.StakePool.toObject = function(includeInstance, msg) {
  var f, obj = {
    daVerifierPool: jspb.Message.getFieldWithDefault(msg, 1, "0"),
    daVerifiersList: msg.getDaVerifiersList_asB64(),
    stateVerifierPool: jspb.Message.getFieldWithDefault(msg, 3, "0"),
    stateVerifiersList: msg.getStateVerifiersList_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.blockchain.StakePool}
 */
proto.blockchain.StakePool.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.blockchain.StakePool;
  return proto.blockchain.StakePool.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.blockchain.StakePool} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.blockchain.StakePool}
 */
proto.blockchain.StakePool.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readUint64String());
      msg.setDaVerifierPool(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.addDaVerifiers(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readUint64String());
      msg.setStateVerifierPool(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.addStateVerifiers(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.blockchain.StakePool.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.blockchain.StakePool.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.blockchain.StakePool} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.blockchain.StakePool.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDaVerifierPool();
  if (parseInt(f, 10) !== 0) {
    writer.writeUint64String(
      1,
      f
    );
  }
  f = message.getDaVerifiersList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(
      2,
      f
    );
  }
  f = message.getStateVerifierPool();
  if (parseInt(f, 10) !== 0) {
    writer.writeUint64String(
      3,
      f
    );
  }
  f = message.getStateVerifiersList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(
      4,
      f
    );
  }
};


/**
 * optional uint64 da_verifier_pool = 1;
 * @return {string}
 */
proto.blockchain.StakePool.prototype.getDaVerifierPool = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, "0"));
};


/**
 * @param {string} value
 * @return {!proto.blockchain.StakePool} returns this
 */
proto.blockchain.StakePool.prototype.setDaVerifierPool = function(value) {
  return jspb.Message.setProto3StringIntField(this, 1, value);
};


/**
 * repeated bytes da_verifiers = 2;
 * @return {!(Array<!Uint8Array>|Array<string>)}
 */
proto.blockchain.StakePool.prototype.getDaVerifiersList = function() {
  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * repeated bytes da_verifiers = 2;
 * This is a type-conversion wrapper around `getDaVerifiersList()`
 * @return {!Array<string>}
 */
proto.blockchain.StakePool.prototype.getDaVerifiersList_asB64 = function() {
  return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(
      this.getDaVerifiersList()));
};


/**
 * repeated bytes da_verifiers = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getDaVerifiersList()`
 * @return {!Array<!Uint8Array>}
 */
proto.blockchain.StakePool.prototype.getDaVerifiersList_asU8 = function() {
  return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
      this.getDaVerifiersList()));
};


/**
 * @param {!(Array<!Uint8Array>|Array<string>)} value
 * @return {!proto.blockchain.StakePool} returns this
 */
proto.blockchain.StakePool.prototype.setDaVerifiersList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 * @return {!proto.blockchain.StakePool} returns this
 */
proto.blockchain.StakePool.prototype.addDaVerifiers = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.blockchain.StakePool} returns this
 */
proto.blockchain.StakePool.prototype.clearDaVerifiersList = function() {
  return this.setDaVerifiersList([]);
};


/**
 * optional uint64 state_verifier_pool = 3;
 * @return {string}
 */
proto.blockchain.StakePool.prototype.getStateVerifierPool = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, "0"));
};


/**
 * @param {string} value
 * @return {!proto.blockchain.StakePool} returns this
 */
proto.blockchain.StakePool.prototype.setStateVerifierPool = function(value) {
  return jspb.Message.setProto3StringIntField(this, 3, value);
};


/**
 * repeated bytes state_verifiers = 4;
 * @return {!(Array<!Uint8Array>|Array<string>)}
 */
proto.blockchain.StakePool.prototype.getStateVerifiersList = function() {
  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getRepeatedField(this, 4));
};


/**
 * repeated bytes state_verifiers = 4;
 * This is a type-conversion wrapper around `getStateVerifiersList()`
 * @return {!Array<string>}
 */
proto.blockchain.StakePool.prototype.getStateVerifiersList_asB64 = function() {
  return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(
      this.getStateVerifiersList()));
};


/**
 * repeated bytes state_verifiers = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getStateVerifiersList()`
 * @return {!Array<!Uint8Array>}
 */
proto.blockchain.StakePool.prototype.getStateVerifiersList_asU8 = function() {
  return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
      this.getStateVerifiersList()));
};


/**
 * @param {!(Array<!Uint8Array>|Array<string>)} value
 * @return {!proto.blockchain.StakePool} returns this
 */
proto.blockchain.StakePool.prototype.setStateVerifiersList = function(value) {
  return jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 * @return {!proto.blockchain.StakePool} returns this
 */
proto.blockchain.StakePool.prototype.addStateVerifiers = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.blockchain.StakePool} returns this
 */
proto.blockchain.StakePool.prototype.clearStateVerifiersList = function() {
  return this.setStateVerifiersList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.blockchain.DataChain.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.blockchain.DataChain.prototype.toObject = function(opt_includeInstance) {
  return proto.blockchain.DataChain.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.blockchain.DataChain} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.blockchain.DataChain.toObject = function(includeInstance, msg) {
  var f, obj = {
    claimsList: jspb.Message.toObjectList(msg.getClaimsList(),
    proto.blockchain.ComputeClaim.toObject, includeInstance),
    rootClaimHash: msg.getRootClaimHash_asB64(),
    headClaimHash: msg.getHeadClaimHash_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.blockchain.DataChain}
 */
proto.blockchain.DataChain.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.blockchain.DataChain;
  return proto.blockchain.DataChain.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.blockchain.DataChain} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.blockchain.DataChain}
 */
proto.blockchain.DataChain.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.blockchain.ComputeClaim;
      reader.readMessage(value,proto.blockchain.ComputeClaim.deserializeBinaryFromReader);
      msg.addClaims(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setRootClaimHash(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setHeadClaimHash(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.blockchain.DataChain.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.blockchain.DataChain.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.blockchain.DataChain} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.blockchain.DataChain.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getClaimsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.blockchain.ComputeClaim.serializeBinaryToWriter
    );
  }
  f = message.getRootClaimHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getHeadClaimHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
};


/**
 * repeated ComputeClaim claims = 1;
 * @return {!Array<!proto.blockchain.ComputeClaim>}
 */
proto.blockchain.DataChain.prototype.getClaimsList = function() {
  return /** @type{!Array<!proto.blockchain.ComputeClaim>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.blockchain.ComputeClaim, 1));
};


/**
 * @param {!Array<!proto.blockchain.ComputeClaim>} value
 * @return {!proto.blockchain.DataChain} returns this
*/
proto.blockchain.DataChain.prototype.setClaimsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.blockchain.ComputeClaim=} opt_value
 * @param {number=} opt_index
 * @return {!proto.blockchain.ComputeClaim}
 */
proto.blockchain.DataChain.prototype.addClaims = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.blockchain.ComputeClaim, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.blockchain.DataChain} returns this
 */
proto.blockchain.DataChain.prototype.clearClaimsList = function() {
  return this.setClaimsList([]);
};


/**
 * optional bytes root_claim_hash = 2;
 * @return {!(string|Uint8Array)}
 */
proto.blockchain.DataChain.prototype.getRootClaimHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes root_claim_hash = 2;
 * This is a type-conversion wrapper around `getRootClaimHash()`
 * @return {string}
 */
proto.blockchain.DataChain.prototype.getRootClaimHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getRootClaimHash()));
};


/**
 * optional bytes root_claim_hash = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getRootClaimHash()`
 * @return {!Uint8Array}
 */
proto.blockchain.DataChain.prototype.getRootClaimHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getRootClaimHash()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.blockchain.DataChain} returns this
 */
proto.blockchain.DataChain.prototype.setRootClaimHash = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional bytes head_claim_hash = 3;
 * @return {!(string|Uint8Array)}
 */
proto.blockchain.DataChain.prototype.getHeadClaimHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes head_claim_hash = 3;
 * This is a type-conversion wrapper around `getHeadClaimHash()`
 * @return {string}
 */
proto.blockchain.DataChain.prototype.getHeadClaimHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getHeadClaimHash()));
};


/**
 * optional bytes head_claim_hash = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getHeadClaimHash()`
 * @return {!Uint8Array}
 */
proto.blockchain.DataChain.prototype.getHeadClaimHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getHeadClaimHash()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.blockchain.DataChain} returns this
 */
proto.blockchain.DataChain.prototype.setHeadClaimHash = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.blockchain.ComputeClaim.prototype.toObject = function(opt_includeInstance) {
  return proto.blockchain.ComputeClaim.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.blockchain.ComputeClaim} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.blockchain.ComputeClaim.toObject = function(includeInstance, msg) {
  var f, obj = {
    claimer: msg.getClaimer_asB64(),
    prevClaimHash: msg.getPrevClaimHash_asB64(),
    dataContract: (f = msg.getDataContract()) && proto.blockchain.ClaimDataRef.toObject(includeInstance, f),
    input: (f = msg.getInput()) && proto.blockchain.ClaimDataRef.toObject(includeInstance, f),
    output: (f = msg.getOutput()) && proto.blockchain.ClaimDataRef.toObject(includeInstance, f),
    maxCartesiCycles: jspb.Message.getFieldWithDefault(msg, 6, "0"),
    outputFileHash: msg.getOutputFileHash_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.blockchain.ComputeClaim}
 */
proto.blockchain.ComputeClaim.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.blockchain.ComputeClaim;
  return proto.blockchain.ComputeClaim.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.blockchain.ComputeClaim} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.blockchain.ComputeClaim}
 */
proto.blockchain.ComputeClaim.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setClaimer(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPrevClaimHash(value);
      break;
    case 3:
      var value = new proto.blockchain.ClaimDataRef;
      reader.readMessage(value,proto.blockchain.ClaimDataRef.deserializeBinaryFromReader);
      msg.setDataContract(value);
      break;
    case 4:
      var value = new proto.blockchain.ClaimDataRef;
      reader.readMessage(value,proto.blockchain.ClaimDataRef.deserializeBinaryFromReader);
      msg.setInput(value);
      break;
    case 5:
      var value = new proto.blockchain.ClaimDataRef;
      reader.readMessage(value,proto.blockchain.ClaimDataRef.deserializeBinaryFromReader);
      msg.setOutput(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readUint64String());
      msg.setMaxCartesiCycles(value);
      break;
    case 7:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setOutputFileHash(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.blockchain.ComputeClaim.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.blockchain.ComputeClaim.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.blockchain.ComputeClaim} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.blockchain.ComputeClaim.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getClaimer_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getPrevClaimHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getDataContract();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.blockchain.ClaimDataRef.serializeBinaryToWriter
    );
  }
  f = message.getInput();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.blockchain.ClaimDataRef.serializeBinaryToWriter
    );
  }
  f = message.getOutput();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.blockchain.ClaimDataRef.serializeBinaryToWriter
    );
  }
  f = message.getMaxCartesiCycles();
  if (parseInt(f, 10) !== 0) {
    writer.writeUint64String(
      6,
      f
    );
  }
  f = message.getOutputFileHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      7,
      f
    );
  }
};


/**
 * optional bytes claimer = 1;
 * @return {!(string|Uint8Array)}
 */
proto.blockchain.ComputeClaim.prototype.getClaimer = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes claimer = 1;
 * This is a type-conversion wrapper around `getClaimer()`
 * @return {string}
 */
proto.blockchain.ComputeClaim.prototype.getClaimer_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getClaimer()));
};


/**
 * optional bytes claimer = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getClaimer()`
 * @return {!Uint8Array}
 */
proto.blockchain.ComputeClaim.prototype.getClaimer_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getClaimer()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.blockchain.ComputeClaim} returns this
 */
proto.blockchain.ComputeClaim.prototype.setClaimer = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes prev_claim_hash = 2;
 * @return {!(string|Uint8Array)}
 */
proto.blockchain.ComputeClaim.prototype.getPrevClaimHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes prev_claim_hash = 2;
 * This is a type-conversion wrapper around `getPrevClaimHash()`
 * @return {string}
 */
proto.blockchain.ComputeClaim.prototype.getPrevClaimHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPrevClaimHash()));
};


/**
 * optional bytes prev_claim_hash = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPrevClaimHash()`
 * @return {!Uint8Array}
 */
proto.blockchain.ComputeClaim.prototype.getPrevClaimHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPrevClaimHash()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.blockchain.ComputeClaim} returns this
 */
proto.blockchain.ComputeClaim.prototype.setPrevClaimHash = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional ClaimDataRef data_contract = 3;
 * @return {?proto.blockchain.ClaimDataRef}
 */
proto.blockchain.ComputeClaim.prototype.getDataContract = function() {
  return /** @type{?proto.blockchain.ClaimDataRef} */ (
    jspb.Message.getWrapperField(this, proto.blockchain.ClaimDataRef, 3));
};


/**
 * @param {?proto.blockchain.ClaimDataRef|undefined} value
 * @return {!proto.blockchain.ComputeClaim} returns this
*/
proto.blockchain.ComputeClaim.prototype.setDataContract = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.blockchain.ComputeClaim} returns this
 */
proto.blockchain.ComputeClaim.prototype.clearDataContract = function() {
  return this.setDataContract(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.blockchain.ComputeClaim.prototype.hasDataContract = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional ClaimDataRef input = 4;
 * @return {?proto.blockchain.ClaimDataRef}
 */
proto.blockchain.ComputeClaim.prototype.getInput = function() {
  return /** @type{?proto.blockchain.ClaimDataRef} */ (
    jspb.Message.getWrapperField(this, proto.blockchain.ClaimDataRef, 4));
};


/**
 * @param {?proto.blockchain.ClaimDataRef|undefined} value
 * @return {!proto.blockchain.ComputeClaim} returns this
*/
proto.blockchain.ComputeClaim.prototype.setInput = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.blockchain.ComputeClaim} returns this
 */
proto.blockchain.ComputeClaim.prototype.clearInput = function() {
  return this.setInput(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.blockchain.ComputeClaim.prototype.hasInput = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional ClaimDataRef output = 5;
 * @return {?proto.blockchain.ClaimDataRef}
 */
proto.blockchain.ComputeClaim.prototype.getOutput = function() {
  return /** @type{?proto.blockchain.ClaimDataRef} */ (
    jspb.Message.getWrapperField(this, proto.blockchain.ClaimDataRef, 5));
};


/**
 * @param {?proto.blockchain.ClaimDataRef|undefined} value
 * @return {!proto.blockchain.ComputeClaim} returns this
*/
proto.blockchain.ComputeClaim.prototype.setOutput = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.blockchain.ComputeClaim} returns this
 */
proto.blockchain.ComputeClaim.prototype.clearOutput = function() {
  return this.setOutput(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.blockchain.ComputeClaim.prototype.hasOutput = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional uint64 max_cartesi_cycles = 6;
 * @return {string}
 */
proto.blockchain.ComputeClaim.prototype.getMaxCartesiCycles = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, "0"));
};


/**
 * @param {string} value
 * @return {!proto.blockchain.ComputeClaim} returns this
 */
proto.blockchain.ComputeClaim.prototype.setMaxCartesiCycles = function(value) {
  return jspb.Message.setProto3StringIntField(this, 6, value);
};


/**
 * optional bytes output_file_hash = 7;
 * @return {!(string|Uint8Array)}
 */
proto.blockchain.ComputeClaim.prototype.getOutputFileHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * optional bytes output_file_hash = 7;
 * This is a type-conversion wrapper around `getOutputFileHash()`
 * @return {string}
 */
proto.blockchain.ComputeClaim.prototype.getOutputFileHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getOutputFileHash()));
};


/**
 * optional bytes output_file_hash = 7;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getOutputFileHash()`
 * @return {!Uint8Array}
 */
proto.blockchain.ComputeClaim.prototype.getOutputFileHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getOutputFileHash()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.blockchain.ComputeClaim} returns this
 */
proto.blockchain.ComputeClaim.prototype.setOutputFileHash = function(value) {
  return jspb.Message.setProto3BytesField(this, 7, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.blockchain.ClaimDataRef.prototype.toObject = function(opt_includeInstance) {
  return proto.blockchain.ClaimDataRef.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.blockchain.ClaimDataRef} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.blockchain.ClaimDataRef.toObject = function(includeInstance, msg) {
  var f, obj = {
    cid: msg.getCid_asB64(),
    size: jspb.Message.getFieldWithDefault(msg, 2, 0),
    cartesimerkleroot: msg.getCartesimerkleroot_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.blockchain.ClaimDataRef}
 */
proto.blockchain.ClaimDataRef.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.blockchain.ClaimDataRef;
  return proto.blockchain.ClaimDataRef.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.blockchain.ClaimDataRef} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.blockchain.ClaimDataRef}
 */
proto.blockchain.ClaimDataRef.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setCid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSize(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setCartesimerkleroot(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.blockchain.ClaimDataRef.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.blockchain.ClaimDataRef.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.blockchain.ClaimDataRef} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.blockchain.ClaimDataRef.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCid_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getSize();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getCartesimerkleroot_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
};


/**
 * optional bytes cid = 1;
 * @return {!(string|Uint8Array)}
 */
proto.blockchain.ClaimDataRef.prototype.getCid = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes cid = 1;
 * This is a type-conversion wrapper around `getCid()`
 * @return {string}
 */
proto.blockchain.ClaimDataRef.prototype.getCid_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getCid()));
};


/**
 * optional bytes cid = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getCid()`
 * @return {!Uint8Array}
 */
proto.blockchain.ClaimDataRef.prototype.getCid_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getCid()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.blockchain.ClaimDataRef} returns this
 */
proto.blockchain.ClaimDataRef.prototype.setCid = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional uint64 size = 2;
 * @return {number}
 */
proto.blockchain.ClaimDataRef.prototype.getSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.blockchain.ClaimDataRef} returns this
 */
proto.blockchain.ClaimDataRef.prototype.setSize = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional bytes cartesiMerkleRoot = 3;
 * @return {!(string|Uint8Array)}
 */
proto.blockchain.ClaimDataRef.prototype.getCartesimerkleroot = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes cartesiMerkleRoot = 3;
 * This is a type-conversion wrapper around `getCartesimerkleroot()`
 * @return {string}
 */
proto.blockchain.ClaimDataRef.prototype.getCartesimerkleroot_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getCartesimerkleroot()));
};


/**
 * optional bytes cartesiMerkleRoot = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getCartesimerkleroot()`
 * @return {!Uint8Array}
 */
proto.blockchain.ClaimDataRef.prototype.getCartesimerkleroot_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getCartesimerkleroot()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.blockchain.ClaimDataRef} returns this
 */
proto.blockchain.ClaimDataRef.prototype.setCartesimerkleroot = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.blockchain.DAInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.blockchain.DAInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.blockchain.DAInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.blockchain.DAInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    size: jspb.Message.getFieldWithDefault(msg, 1, 0),
    cartesiMerkleRoot: msg.getCartesiMerkleRoot_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.blockchain.DAInfo}
 */
proto.blockchain.DAInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.blockchain.DAInfo;
  return proto.blockchain.DAInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.blockchain.DAInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.blockchain.DAInfo}
 */
proto.blockchain.DAInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSize(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setCartesiMerkleRoot(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.blockchain.DAInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.blockchain.DAInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.blockchain.DAInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.blockchain.DAInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSize();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getCartesiMerkleRoot_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional uint32 size = 1;
 * @return {number}
 */
proto.blockchain.DAInfo.prototype.getSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.blockchain.DAInfo} returns this
 */
proto.blockchain.DAInfo.prototype.setSize = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional bytes cartesi_merkle_root = 2;
 * @return {!(string|Uint8Array)}
 */
proto.blockchain.DAInfo.prototype.getCartesiMerkleRoot = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes cartesi_merkle_root = 2;
 * This is a type-conversion wrapper around `getCartesiMerkleRoot()`
 * @return {string}
 */
proto.blockchain.DAInfo.prototype.getCartesiMerkleRoot_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getCartesiMerkleRoot()));
};


/**
 * optional bytes cartesi_merkle_root = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getCartesiMerkleRoot()`
 * @return {!Uint8Array}
 */
proto.blockchain.DAInfo.prototype.getCartesiMerkleRoot_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getCartesiMerkleRoot()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.blockchain.DAInfo} returns this
 */
proto.blockchain.DAInfo.prototype.setCartesiMerkleRoot = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.blockchain.Block.repeatedFields_ = [3,4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.blockchain.Block.prototype.toObject = function(opt_includeInstance) {
  return proto.blockchain.Block.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.blockchain.Block} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.blockchain.Block.toObject = function(includeInstance, msg) {
  var f, obj = {
    version: jspb.Message.getFieldWithDefault(msg, 1, 0),
    prevBlockHash: msg.getPrevBlockHash_asB64(),
    accountsMerkleList: msg.getAccountsMerkleList_asB64(),
    transactionsList: jspb.Message.toObjectList(msg.getTransactionsList(),
    proto.blockchain.SignedTransaction.toObject, includeInstance),
    proof: (f = msg.getProof()) && proto.blockchain.BlockProof.toObject(includeInstance, f),
    time: jspb.Message.getFieldWithDefault(msg, 6, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.blockchain.Block}
 */
proto.blockchain.Block.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.blockchain.Block;
  return proto.blockchain.Block.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.blockchain.Block} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.blockchain.Block}
 */
proto.blockchain.Block.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setVersion(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPrevBlockHash(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.addAccountsMerkle(value);
      break;
    case 4:
      var value = new proto.blockchain.SignedTransaction;
      reader.readMessage(value,proto.blockchain.SignedTransaction.deserializeBinaryFromReader);
      msg.addTransactions(value);
      break;
    case 5:
      var value = new proto.blockchain.BlockProof;
      reader.readMessage(value,proto.blockchain.BlockProof.deserializeBinaryFromReader);
      msg.setProof(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.blockchain.Block.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.blockchain.Block.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.blockchain.Block} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.blockchain.Block.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVersion();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getPrevBlockHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getAccountsMerkleList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(
      3,
      f
    );
  }
  f = message.getTransactionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.blockchain.SignedTransaction.serializeBinaryToWriter
    );
  }
  f = message.getProof();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.blockchain.BlockProof.serializeBinaryToWriter
    );
  }
  f = message.getTime();
  if (f !== 0) {
    writer.writeUint32(
      6,
      f
    );
  }
};


/**
 * optional uint32 version = 1;
 * @return {number}
 */
proto.blockchain.Block.prototype.getVersion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.blockchain.Block} returns this
 */
proto.blockchain.Block.prototype.setVersion = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional bytes prev_block_hash = 2;
 * @return {!(string|Uint8Array)}
 */
proto.blockchain.Block.prototype.getPrevBlockHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes prev_block_hash = 2;
 * This is a type-conversion wrapper around `getPrevBlockHash()`
 * @return {string}
 */
proto.blockchain.Block.prototype.getPrevBlockHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPrevBlockHash()));
};


/**
 * optional bytes prev_block_hash = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPrevBlockHash()`
 * @return {!Uint8Array}
 */
proto.blockchain.Block.prototype.getPrevBlockHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPrevBlockHash()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.blockchain.Block} returns this
 */
proto.blockchain.Block.prototype.setPrevBlockHash = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * repeated bytes accounts_merkle = 3;
 * @return {!(Array<!Uint8Array>|Array<string>)}
 */
proto.blockchain.Block.prototype.getAccountsMerkleList = function() {
  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * repeated bytes accounts_merkle = 3;
 * This is a type-conversion wrapper around `getAccountsMerkleList()`
 * @return {!Array<string>}
 */
proto.blockchain.Block.prototype.getAccountsMerkleList_asB64 = function() {
  return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(
      this.getAccountsMerkleList()));
};


/**
 * repeated bytes accounts_merkle = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAccountsMerkleList()`
 * @return {!Array<!Uint8Array>}
 */
proto.blockchain.Block.prototype.getAccountsMerkleList_asU8 = function() {
  return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
      this.getAccountsMerkleList()));
};


/**
 * @param {!(Array<!Uint8Array>|Array<string>)} value
 * @return {!proto.blockchain.Block} returns this
 */
proto.blockchain.Block.prototype.setAccountsMerkleList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 * @return {!proto.blockchain.Block} returns this
 */
proto.blockchain.Block.prototype.addAccountsMerkle = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.blockchain.Block} returns this
 */
proto.blockchain.Block.prototype.clearAccountsMerkleList = function() {
  return this.setAccountsMerkleList([]);
};


/**
 * repeated SignedTransaction transactions = 4;
 * @return {!Array<!proto.blockchain.SignedTransaction>}
 */
proto.blockchain.Block.prototype.getTransactionsList = function() {
  return /** @type{!Array<!proto.blockchain.SignedTransaction>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.blockchain.SignedTransaction, 4));
};


/**
 * @param {!Array<!proto.blockchain.SignedTransaction>} value
 * @return {!proto.blockchain.Block} returns this
*/
proto.blockchain.Block.prototype.setTransactionsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.blockchain.SignedTransaction=} opt_value
 * @param {number=} opt_index
 * @return {!proto.blockchain.SignedTransaction}
 */
proto.blockchain.Block.prototype.addTransactions = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.blockchain.SignedTransaction, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.blockchain.Block} returns this
 */
proto.blockchain.Block.prototype.clearTransactionsList = function() {
  return this.setTransactionsList([]);
};


/**
 * optional BlockProof proof = 5;
 * @return {?proto.blockchain.BlockProof}
 */
proto.blockchain.Block.prototype.getProof = function() {
  return /** @type{?proto.blockchain.BlockProof} */ (
    jspb.Message.getWrapperField(this, proto.blockchain.BlockProof, 5));
};


/**
 * @param {?proto.blockchain.BlockProof|undefined} value
 * @return {!proto.blockchain.Block} returns this
*/
proto.blockchain.Block.prototype.setProof = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.blockchain.Block} returns this
 */
proto.blockchain.Block.prototype.clearProof = function() {
  return this.setProof(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.blockchain.Block.prototype.hasProof = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional uint32 time = 6;
 * @return {number}
 */
proto.blockchain.Block.prototype.getTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.blockchain.Block} returns this
 */
proto.blockchain.Block.prototype.setTime = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.blockchain.BlockProof.repeatedFields_ = [4,6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.blockchain.BlockProof.prototype.toObject = function(opt_includeInstance) {
  return proto.blockchain.BlockProof.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.blockchain.BlockProof} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.blockchain.BlockProof.toObject = function(includeInstance, msg) {
  var f, obj = {
    txnBundleHash: msg.getTxnBundleHash_asB64(),
    txnBundleProposer: msg.getTxnBundleProposer_asB64(),
    randomnessProof: msg.getRandomnessProof_asB64(),
    daCheckResultsList: jspb.Message.toObjectList(msg.getDaCheckResultsList(),
    proto.blockchain.DACheckResult.toObject, includeInstance),
    aggDaCheckResultSignature: msg.getAggDaCheckResultSignature_asB64(),
    stateCheckResultsList: jspb.Message.toObjectList(msg.getStateCheckResultsList(),
    proto.blockchain.StateCheckResult.toObject, includeInstance),
    aggStateCheckResultSignature: msg.getAggStateCheckResultSignature_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.blockchain.BlockProof}
 */
proto.blockchain.BlockProof.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.blockchain.BlockProof;
  return proto.blockchain.BlockProof.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.blockchain.BlockProof} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.blockchain.BlockProof}
 */
proto.blockchain.BlockProof.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setTxnBundleHash(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setTxnBundleProposer(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setRandomnessProof(value);
      break;
    case 4:
      var value = new proto.blockchain.DACheckResult;
      reader.readMessage(value,proto.blockchain.DACheckResult.deserializeBinaryFromReader);
      msg.addDaCheckResults(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAggDaCheckResultSignature(value);
      break;
    case 6:
      var value = new proto.blockchain.StateCheckResult;
      reader.readMessage(value,proto.blockchain.StateCheckResult.deserializeBinaryFromReader);
      msg.addStateCheckResults(value);
      break;
    case 7:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAggStateCheckResultSignature(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.blockchain.BlockProof.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.blockchain.BlockProof.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.blockchain.BlockProof} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.blockchain.BlockProof.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTxnBundleHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getTxnBundleProposer_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getRandomnessProof_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getDaCheckResultsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.blockchain.DACheckResult.serializeBinaryToWriter
    );
  }
  f = message.getAggDaCheckResultSignature_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      5,
      f
    );
  }
  f = message.getStateCheckResultsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.blockchain.StateCheckResult.serializeBinaryToWriter
    );
  }
  f = message.getAggStateCheckResultSignature_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      7,
      f
    );
  }
};


/**
 * optional bytes txn_bundle_hash = 1;
 * @return {!(string|Uint8Array)}
 */
proto.blockchain.BlockProof.prototype.getTxnBundleHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes txn_bundle_hash = 1;
 * This is a type-conversion wrapper around `getTxnBundleHash()`
 * @return {string}
 */
proto.blockchain.BlockProof.prototype.getTxnBundleHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getTxnBundleHash()));
};


/**
 * optional bytes txn_bundle_hash = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTxnBundleHash()`
 * @return {!Uint8Array}
 */
proto.blockchain.BlockProof.prototype.getTxnBundleHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getTxnBundleHash()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.blockchain.BlockProof} returns this
 */
proto.blockchain.BlockProof.prototype.setTxnBundleHash = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes txn_bundle_proposer = 2;
 * @return {!(string|Uint8Array)}
 */
proto.blockchain.BlockProof.prototype.getTxnBundleProposer = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes txn_bundle_proposer = 2;
 * This is a type-conversion wrapper around `getTxnBundleProposer()`
 * @return {string}
 */
proto.blockchain.BlockProof.prototype.getTxnBundleProposer_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getTxnBundleProposer()));
};


/**
 * optional bytes txn_bundle_proposer = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTxnBundleProposer()`
 * @return {!Uint8Array}
 */
proto.blockchain.BlockProof.prototype.getTxnBundleProposer_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getTxnBundleProposer()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.blockchain.BlockProof} returns this
 */
proto.blockchain.BlockProof.prototype.setTxnBundleProposer = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional bytes randomness_proof = 3;
 * @return {!(string|Uint8Array)}
 */
proto.blockchain.BlockProof.prototype.getRandomnessProof = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes randomness_proof = 3;
 * This is a type-conversion wrapper around `getRandomnessProof()`
 * @return {string}
 */
proto.blockchain.BlockProof.prototype.getRandomnessProof_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getRandomnessProof()));
};


/**
 * optional bytes randomness_proof = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getRandomnessProof()`
 * @return {!Uint8Array}
 */
proto.blockchain.BlockProof.prototype.getRandomnessProof_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getRandomnessProof()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.blockchain.BlockProof} returns this
 */
proto.blockchain.BlockProof.prototype.setRandomnessProof = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * repeated DACheckResult da_check_results = 4;
 * @return {!Array<!proto.blockchain.DACheckResult>}
 */
proto.blockchain.BlockProof.prototype.getDaCheckResultsList = function() {
  return /** @type{!Array<!proto.blockchain.DACheckResult>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.blockchain.DACheckResult, 4));
};


/**
 * @param {!Array<!proto.blockchain.DACheckResult>} value
 * @return {!proto.blockchain.BlockProof} returns this
*/
proto.blockchain.BlockProof.prototype.setDaCheckResultsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.blockchain.DACheckResult=} opt_value
 * @param {number=} opt_index
 * @return {!proto.blockchain.DACheckResult}
 */
proto.blockchain.BlockProof.prototype.addDaCheckResults = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.blockchain.DACheckResult, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.blockchain.BlockProof} returns this
 */
proto.blockchain.BlockProof.prototype.clearDaCheckResultsList = function() {
  return this.setDaCheckResultsList([]);
};


/**
 * optional bytes agg_da_check_result_signature = 5;
 * @return {!(string|Uint8Array)}
 */
proto.blockchain.BlockProof.prototype.getAggDaCheckResultSignature = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * optional bytes agg_da_check_result_signature = 5;
 * This is a type-conversion wrapper around `getAggDaCheckResultSignature()`
 * @return {string}
 */
proto.blockchain.BlockProof.prototype.getAggDaCheckResultSignature_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAggDaCheckResultSignature()));
};


/**
 * optional bytes agg_da_check_result_signature = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAggDaCheckResultSignature()`
 * @return {!Uint8Array}
 */
proto.blockchain.BlockProof.prototype.getAggDaCheckResultSignature_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAggDaCheckResultSignature()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.blockchain.BlockProof} returns this
 */
proto.blockchain.BlockProof.prototype.setAggDaCheckResultSignature = function(value) {
  return jspb.Message.setProto3BytesField(this, 5, value);
};


/**
 * repeated StateCheckResult state_check_results = 6;
 * @return {!Array<!proto.blockchain.StateCheckResult>}
 */
proto.blockchain.BlockProof.prototype.getStateCheckResultsList = function() {
  return /** @type{!Array<!proto.blockchain.StateCheckResult>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.blockchain.StateCheckResult, 6));
};


/**
 * @param {!Array<!proto.blockchain.StateCheckResult>} value
 * @return {!proto.blockchain.BlockProof} returns this
*/
proto.blockchain.BlockProof.prototype.setStateCheckResultsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.blockchain.StateCheckResult=} opt_value
 * @param {number=} opt_index
 * @return {!proto.blockchain.StateCheckResult}
 */
proto.blockchain.BlockProof.prototype.addStateCheckResults = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.blockchain.StateCheckResult, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.blockchain.BlockProof} returns this
 */
proto.blockchain.BlockProof.prototype.clearStateCheckResultsList = function() {
  return this.setStateCheckResultsList([]);
};


/**
 * optional bytes agg_state_check_result_signature = 7;
 * @return {!(string|Uint8Array)}
 */
proto.blockchain.BlockProof.prototype.getAggStateCheckResultSignature = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * optional bytes agg_state_check_result_signature = 7;
 * This is a type-conversion wrapper around `getAggStateCheckResultSignature()`
 * @return {string}
 */
proto.blockchain.BlockProof.prototype.getAggStateCheckResultSignature_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAggStateCheckResultSignature()));
};


/**
 * optional bytes agg_state_check_result_signature = 7;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAggStateCheckResultSignature()`
 * @return {!Uint8Array}
 */
proto.blockchain.BlockProof.prototype.getAggStateCheckResultSignature_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAggStateCheckResultSignature()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.blockchain.BlockProof} returns this
 */
proto.blockchain.BlockProof.prototype.setAggStateCheckResultSignature = function(value) {
  return jspb.Message.setProto3BytesField(this, 7, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.blockchain.DACheckResult.repeatedFields_ = [5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.blockchain.DACheckResult.prototype.toObject = function(opt_includeInstance) {
  return proto.blockchain.DACheckResult.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.blockchain.DACheckResult} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.blockchain.DACheckResult.toObject = function(includeInstance, msg) {
  var f, obj = {
    txnBundleHash: msg.getTxnBundleHash_asB64(),
    randomnessProof: msg.getRandomnessProof_asB64(),
    signature: msg.getSignature_asB64(),
    signer: msg.getSigner_asB64(),
    claimsList: jspb.Message.toObjectList(msg.getClaimsList(),
    proto.blockchain.ClaimDACheckResult.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.blockchain.DACheckResult}
 */
proto.blockchain.DACheckResult.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.blockchain.DACheckResult;
  return proto.blockchain.DACheckResult.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.blockchain.DACheckResult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.blockchain.DACheckResult}
 */
proto.blockchain.DACheckResult.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setTxnBundleHash(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setRandomnessProof(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSignature(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSigner(value);
      break;
    case 5:
      var value = new proto.blockchain.ClaimDACheckResult;
      reader.readMessage(value,proto.blockchain.ClaimDACheckResult.deserializeBinaryFromReader);
      msg.addClaims(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.blockchain.DACheckResult.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.blockchain.DACheckResult.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.blockchain.DACheckResult} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.blockchain.DACheckResult.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTxnBundleHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getRandomnessProof_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getSignature_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getSigner_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = message.getClaimsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.blockchain.ClaimDACheckResult.serializeBinaryToWriter
    );
  }
};


/**
 * optional bytes txn_bundle_hash = 1;
 * @return {!(string|Uint8Array)}
 */
proto.blockchain.DACheckResult.prototype.getTxnBundleHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes txn_bundle_hash = 1;
 * This is a type-conversion wrapper around `getTxnBundleHash()`
 * @return {string}
 */
proto.blockchain.DACheckResult.prototype.getTxnBundleHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getTxnBundleHash()));
};


/**
 * optional bytes txn_bundle_hash = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTxnBundleHash()`
 * @return {!Uint8Array}
 */
proto.blockchain.DACheckResult.prototype.getTxnBundleHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getTxnBundleHash()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.blockchain.DACheckResult} returns this
 */
proto.blockchain.DACheckResult.prototype.setTxnBundleHash = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes randomness_proof = 2;
 * @return {!(string|Uint8Array)}
 */
proto.blockchain.DACheckResult.prototype.getRandomnessProof = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes randomness_proof = 2;
 * This is a type-conversion wrapper around `getRandomnessProof()`
 * @return {string}
 */
proto.blockchain.DACheckResult.prototype.getRandomnessProof_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getRandomnessProof()));
};


/**
 * optional bytes randomness_proof = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getRandomnessProof()`
 * @return {!Uint8Array}
 */
proto.blockchain.DACheckResult.prototype.getRandomnessProof_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getRandomnessProof()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.blockchain.DACheckResult} returns this
 */
proto.blockchain.DACheckResult.prototype.setRandomnessProof = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional bytes signature = 3;
 * @return {!(string|Uint8Array)}
 */
proto.blockchain.DACheckResult.prototype.getSignature = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes signature = 3;
 * This is a type-conversion wrapper around `getSignature()`
 * @return {string}
 */
proto.blockchain.DACheckResult.prototype.getSignature_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSignature()));
};


/**
 * optional bytes signature = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSignature()`
 * @return {!Uint8Array}
 */
proto.blockchain.DACheckResult.prototype.getSignature_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSignature()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.blockchain.DACheckResult} returns this
 */
proto.blockchain.DACheckResult.prototype.setSignature = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional bytes signer = 4;
 * @return {!(string|Uint8Array)}
 */
proto.blockchain.DACheckResult.prototype.getSigner = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes signer = 4;
 * This is a type-conversion wrapper around `getSigner()`
 * @return {string}
 */
proto.blockchain.DACheckResult.prototype.getSigner_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSigner()));
};


/**
 * optional bytes signer = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSigner()`
 * @return {!Uint8Array}
 */
proto.blockchain.DACheckResult.prototype.getSigner_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSigner()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.blockchain.DACheckResult} returns this
 */
proto.blockchain.DACheckResult.prototype.setSigner = function(value) {
  return jspb.Message.setProto3BytesField(this, 4, value);
};


/**
 * repeated ClaimDACheckResult claims = 5;
 * @return {!Array<!proto.blockchain.ClaimDACheckResult>}
 */
proto.blockchain.DACheckResult.prototype.getClaimsList = function() {
  return /** @type{!Array<!proto.blockchain.ClaimDACheckResult>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.blockchain.ClaimDACheckResult, 5));
};


/**
 * @param {!Array<!proto.blockchain.ClaimDACheckResult>} value
 * @return {!proto.blockchain.DACheckResult} returns this
*/
proto.blockchain.DACheckResult.prototype.setClaimsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.blockchain.ClaimDACheckResult=} opt_value
 * @param {number=} opt_index
 * @return {!proto.blockchain.ClaimDACheckResult}
 */
proto.blockchain.DACheckResult.prototype.addClaims = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.blockchain.ClaimDACheckResult, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.blockchain.DACheckResult} returns this
 */
proto.blockchain.DACheckResult.prototype.clearClaimsList = function() {
  return this.setClaimsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.blockchain.StateCheckResult.repeatedFields_ = [5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.blockchain.StateCheckResult.prototype.toObject = function(opt_includeInstance) {
  return proto.blockchain.StateCheckResult.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.blockchain.StateCheckResult} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.blockchain.StateCheckResult.toObject = function(includeInstance, msg) {
  var f, obj = {
    txnBundleHash: msg.getTxnBundleHash_asB64(),
    randomnessProof: msg.getRandomnessProof_asB64(),
    signature: msg.getSignature_asB64(),
    signer: msg.getSigner_asB64(),
    claimsList: jspb.Message.toObjectList(msg.getClaimsList(),
    proto.blockchain.ClaimStateCheckResult.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.blockchain.StateCheckResult}
 */
proto.blockchain.StateCheckResult.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.blockchain.StateCheckResult;
  return proto.blockchain.StateCheckResult.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.blockchain.StateCheckResult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.blockchain.StateCheckResult}
 */
proto.blockchain.StateCheckResult.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setTxnBundleHash(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setRandomnessProof(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSignature(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSigner(value);
      break;
    case 5:
      var value = new proto.blockchain.ClaimStateCheckResult;
      reader.readMessage(value,proto.blockchain.ClaimStateCheckResult.deserializeBinaryFromReader);
      msg.addClaims(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.blockchain.StateCheckResult.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.blockchain.StateCheckResult.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.blockchain.StateCheckResult} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.blockchain.StateCheckResult.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTxnBundleHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getRandomnessProof_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getSignature_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getSigner_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = message.getClaimsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.blockchain.ClaimStateCheckResult.serializeBinaryToWriter
    );
  }
};


/**
 * optional bytes txn_bundle_hash = 1;
 * @return {!(string|Uint8Array)}
 */
proto.blockchain.StateCheckResult.prototype.getTxnBundleHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes txn_bundle_hash = 1;
 * This is a type-conversion wrapper around `getTxnBundleHash()`
 * @return {string}
 */
proto.blockchain.StateCheckResult.prototype.getTxnBundleHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getTxnBundleHash()));
};


/**
 * optional bytes txn_bundle_hash = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTxnBundleHash()`
 * @return {!Uint8Array}
 */
proto.blockchain.StateCheckResult.prototype.getTxnBundleHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getTxnBundleHash()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.blockchain.StateCheckResult} returns this
 */
proto.blockchain.StateCheckResult.prototype.setTxnBundleHash = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes randomness_proof = 2;
 * @return {!(string|Uint8Array)}
 */
proto.blockchain.StateCheckResult.prototype.getRandomnessProof = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes randomness_proof = 2;
 * This is a type-conversion wrapper around `getRandomnessProof()`
 * @return {string}
 */
proto.blockchain.StateCheckResult.prototype.getRandomnessProof_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getRandomnessProof()));
};


/**
 * optional bytes randomness_proof = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getRandomnessProof()`
 * @return {!Uint8Array}
 */
proto.blockchain.StateCheckResult.prototype.getRandomnessProof_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getRandomnessProof()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.blockchain.StateCheckResult} returns this
 */
proto.blockchain.StateCheckResult.prototype.setRandomnessProof = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional bytes signature = 3;
 * @return {!(string|Uint8Array)}
 */
proto.blockchain.StateCheckResult.prototype.getSignature = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes signature = 3;
 * This is a type-conversion wrapper around `getSignature()`
 * @return {string}
 */
proto.blockchain.StateCheckResult.prototype.getSignature_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSignature()));
};


/**
 * optional bytes signature = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSignature()`
 * @return {!Uint8Array}
 */
proto.blockchain.StateCheckResult.prototype.getSignature_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSignature()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.blockchain.StateCheckResult} returns this
 */
proto.blockchain.StateCheckResult.prototype.setSignature = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional bytes signer = 4;
 * @return {!(string|Uint8Array)}
 */
proto.blockchain.StateCheckResult.prototype.getSigner = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes signer = 4;
 * This is a type-conversion wrapper around `getSigner()`
 * @return {string}
 */
proto.blockchain.StateCheckResult.prototype.getSigner_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSigner()));
};


/**
 * optional bytes signer = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSigner()`
 * @return {!Uint8Array}
 */
proto.blockchain.StateCheckResult.prototype.getSigner_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSigner()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.blockchain.StateCheckResult} returns this
 */
proto.blockchain.StateCheckResult.prototype.setSigner = function(value) {
  return jspb.Message.setProto3BytesField(this, 4, value);
};


/**
 * repeated ClaimStateCheckResult claims = 5;
 * @return {!Array<!proto.blockchain.ClaimStateCheckResult>}
 */
proto.blockchain.StateCheckResult.prototype.getClaimsList = function() {
  return /** @type{!Array<!proto.blockchain.ClaimStateCheckResult>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.blockchain.ClaimStateCheckResult, 5));
};


/**
 * @param {!Array<!proto.blockchain.ClaimStateCheckResult>} value
 * @return {!proto.blockchain.StateCheckResult} returns this
*/
proto.blockchain.StateCheckResult.prototype.setClaimsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.blockchain.ClaimStateCheckResult=} opt_value
 * @param {number=} opt_index
 * @return {!proto.blockchain.ClaimStateCheckResult}
 */
proto.blockchain.StateCheckResult.prototype.addClaims = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.blockchain.ClaimStateCheckResult, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.blockchain.StateCheckResult} returns this
 */
proto.blockchain.StateCheckResult.prototype.clearClaimsList = function() {
  return this.setClaimsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.blockchain.ClaimDACheckResult.prototype.toObject = function(opt_includeInstance) {
  return proto.blockchain.ClaimDACheckResult.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.blockchain.ClaimDACheckResult} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.blockchain.ClaimDACheckResult.toObject = function(includeInstance, msg) {
  var f, obj = {
    claimHash: msg.getClaimHash_asB64(),
    dataAvailable: jspb.Message.getBooleanFieldWithDefault(msg, 2, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.blockchain.ClaimDACheckResult}
 */
proto.blockchain.ClaimDACheckResult.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.blockchain.ClaimDACheckResult;
  return proto.blockchain.ClaimDACheckResult.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.blockchain.ClaimDACheckResult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.blockchain.ClaimDACheckResult}
 */
proto.blockchain.ClaimDACheckResult.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setClaimHash(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDataAvailable(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.blockchain.ClaimDACheckResult.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.blockchain.ClaimDACheckResult.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.blockchain.ClaimDACheckResult} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.blockchain.ClaimDACheckResult.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getClaimHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getDataAvailable();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * optional bytes claim_hash = 1;
 * @return {!(string|Uint8Array)}
 */
proto.blockchain.ClaimDACheckResult.prototype.getClaimHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes claim_hash = 1;
 * This is a type-conversion wrapper around `getClaimHash()`
 * @return {string}
 */
proto.blockchain.ClaimDACheckResult.prototype.getClaimHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getClaimHash()));
};


/**
 * optional bytes claim_hash = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getClaimHash()`
 * @return {!Uint8Array}
 */
proto.blockchain.ClaimDACheckResult.prototype.getClaimHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getClaimHash()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.blockchain.ClaimDACheckResult} returns this
 */
proto.blockchain.ClaimDACheckResult.prototype.setClaimHash = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bool data_available = 2;
 * @return {boolean}
 */
proto.blockchain.ClaimDACheckResult.prototype.getDataAvailable = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.blockchain.ClaimDACheckResult} returns this
 */
proto.blockchain.ClaimDACheckResult.prototype.setDataAvailable = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.blockchain.ClaimStateCheckResult.prototype.toObject = function(opt_includeInstance) {
  return proto.blockchain.ClaimStateCheckResult.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.blockchain.ClaimStateCheckResult} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.blockchain.ClaimStateCheckResult.toObject = function(includeInstance, msg) {
  var f, obj = {
    claimHash: msg.getClaimHash_asB64(),
    stateCorrect: jspb.Message.getBooleanFieldWithDefault(msg, 2, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.blockchain.ClaimStateCheckResult}
 */
proto.blockchain.ClaimStateCheckResult.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.blockchain.ClaimStateCheckResult;
  return proto.blockchain.ClaimStateCheckResult.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.blockchain.ClaimStateCheckResult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.blockchain.ClaimStateCheckResult}
 */
proto.blockchain.ClaimStateCheckResult.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setClaimHash(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setStateCorrect(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.blockchain.ClaimStateCheckResult.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.blockchain.ClaimStateCheckResult.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.blockchain.ClaimStateCheckResult} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.blockchain.ClaimStateCheckResult.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getClaimHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getStateCorrect();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * optional bytes claim_hash = 1;
 * @return {!(string|Uint8Array)}
 */
proto.blockchain.ClaimStateCheckResult.prototype.getClaimHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes claim_hash = 1;
 * This is a type-conversion wrapper around `getClaimHash()`
 * @return {string}
 */
proto.blockchain.ClaimStateCheckResult.prototype.getClaimHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getClaimHash()));
};


/**
 * optional bytes claim_hash = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getClaimHash()`
 * @return {!Uint8Array}
 */
proto.blockchain.ClaimStateCheckResult.prototype.getClaimHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getClaimHash()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.blockchain.ClaimStateCheckResult} returns this
 */
proto.blockchain.ClaimStateCheckResult.prototype.setClaimHash = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bool state_correct = 2;
 * @return {boolean}
 */
proto.blockchain.ClaimStateCheckResult.prototype.getStateCorrect = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.blockchain.ClaimStateCheckResult} returns this
 */
proto.blockchain.ClaimStateCheckResult.prototype.setStateCorrect = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.blockchain.TransactionBundle.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.blockchain.TransactionBundle.prototype.toObject = function(opt_includeInstance) {
  return proto.blockchain.TransactionBundle.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.blockchain.TransactionBundle} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.blockchain.TransactionBundle.toObject = function(includeInstance, msg) {
  var f, obj = {
    headBlockHash: msg.getHeadBlockHash_asB64(),
    transactionsList: jspb.Message.toObjectList(msg.getTransactionsList(),
    proto.blockchain.SignedTransaction.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.blockchain.TransactionBundle}
 */
proto.blockchain.TransactionBundle.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.blockchain.TransactionBundle;
  return proto.blockchain.TransactionBundle.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.blockchain.TransactionBundle} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.blockchain.TransactionBundle}
 */
proto.blockchain.TransactionBundle.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setHeadBlockHash(value);
      break;
    case 2:
      var value = new proto.blockchain.SignedTransaction;
      reader.readMessage(value,proto.blockchain.SignedTransaction.deserializeBinaryFromReader);
      msg.addTransactions(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.blockchain.TransactionBundle.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.blockchain.TransactionBundle.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.blockchain.TransactionBundle} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.blockchain.TransactionBundle.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeadBlockHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getTransactionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.blockchain.SignedTransaction.serializeBinaryToWriter
    );
  }
};


/**
 * optional bytes head_block_hash = 1;
 * @return {!(string|Uint8Array)}
 */
proto.blockchain.TransactionBundle.prototype.getHeadBlockHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes head_block_hash = 1;
 * This is a type-conversion wrapper around `getHeadBlockHash()`
 * @return {string}
 */
proto.blockchain.TransactionBundle.prototype.getHeadBlockHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getHeadBlockHash()));
};


/**
 * optional bytes head_block_hash = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getHeadBlockHash()`
 * @return {!Uint8Array}
 */
proto.blockchain.TransactionBundle.prototype.getHeadBlockHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getHeadBlockHash()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.blockchain.TransactionBundle} returns this
 */
proto.blockchain.TransactionBundle.prototype.setHeadBlockHash = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * repeated SignedTransaction transactions = 2;
 * @return {!Array<!proto.blockchain.SignedTransaction>}
 */
proto.blockchain.TransactionBundle.prototype.getTransactionsList = function() {
  return /** @type{!Array<!proto.blockchain.SignedTransaction>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.blockchain.SignedTransaction, 2));
};


/**
 * @param {!Array<!proto.blockchain.SignedTransaction>} value
 * @return {!proto.blockchain.TransactionBundle} returns this
*/
proto.blockchain.TransactionBundle.prototype.setTransactionsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.blockchain.SignedTransaction=} opt_value
 * @param {number=} opt_index
 * @return {!proto.blockchain.SignedTransaction}
 */
proto.blockchain.TransactionBundle.prototype.addTransactions = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.blockchain.SignedTransaction, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.blockchain.TransactionBundle} returns this
 */
proto.blockchain.TransactionBundle.prototype.clearTransactionsList = function() {
  return this.setTransactionsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.blockchain.BlockMetadata.prototype.toObject = function(opt_includeInstance) {
  return proto.blockchain.BlockMetadata.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.blockchain.BlockMetadata} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.blockchain.BlockMetadata.toObject = function(includeInstance, msg) {
  var f, obj = {
    cid: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.blockchain.BlockMetadata}
 */
proto.blockchain.BlockMetadata.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.blockchain.BlockMetadata;
  return proto.blockchain.BlockMetadata.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.blockchain.BlockMetadata} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.blockchain.BlockMetadata}
 */
proto.blockchain.BlockMetadata.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.blockchain.BlockMetadata.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.blockchain.BlockMetadata.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.blockchain.BlockMetadata} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.blockchain.BlockMetadata.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string cid = 1;
 * @return {string}
 */
proto.blockchain.BlockMetadata.prototype.getCid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.blockchain.BlockMetadata} returns this
 */
proto.blockchain.BlockMetadata.prototype.setCid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * @enum {number}
 */
proto.blockchain.StakeType = {
  DA_VERIFIER: 0,
  STATE_VERIFIER: 1
};

goog.object.extend(exports, proto.blockchain);
