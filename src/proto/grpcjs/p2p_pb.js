// source: p2p.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() {
  if (this) { return this; }
  if (typeof window !== 'undefined') { return window; }
  if (typeof global !== 'undefined') { return global; }
  if (typeof self !== 'undefined') { return self; }
  return Function('return this')();
}.call(null));

var blockchain_pb = require('./blockchain_pb.js');
goog.object.extend(proto, blockchain_pb);
goog.exportSymbol('proto.node.DAVerificationRequest', null, global);
goog.exportSymbol('proto.node.DAVerificationResponse', null, global);
goog.exportSymbol('proto.node.P2PPubSubMessage', null, global);
goog.exportSymbol('proto.node.StateVerificationRequest', null, global);
goog.exportSymbol('proto.node.StateVerificationResponse', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.node.P2PPubSubMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.node.P2PPubSubMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.node.P2PPubSubMessage.displayName = 'proto.node.P2PPubSubMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.node.DAVerificationRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.node.DAVerificationRequest.repeatedFields_, null);
};
goog.inherits(proto.node.DAVerificationRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.node.DAVerificationRequest.displayName = 'proto.node.DAVerificationRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.node.DAVerificationResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.node.DAVerificationResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.node.DAVerificationResponse.displayName = 'proto.node.DAVerificationResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.node.StateVerificationRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.node.StateVerificationRequest.repeatedFields_, null);
};
goog.inherits(proto.node.StateVerificationRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.node.StateVerificationRequest.displayName = 'proto.node.StateVerificationRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.node.StateVerificationResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.node.StateVerificationResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.node.StateVerificationResponse.displayName = 'proto.node.StateVerificationResponse';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.node.P2PPubSubMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.node.P2PPubSubMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.node.P2PPubSubMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.node.P2PPubSubMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    daVerificationRequest: (f = msg.getDaVerificationRequest()) && proto.node.DAVerificationRequest.toObject(includeInstance, f),
    daVerificationResponse: (f = msg.getDaVerificationResponse()) && proto.node.DAVerificationResponse.toObject(includeInstance, f),
    stateVerificationRequest: (f = msg.getStateVerificationRequest()) && proto.node.StateVerificationRequest.toObject(includeInstance, f),
    stateVerificationResponse: (f = msg.getStateVerificationResponse()) && proto.node.StateVerificationResponse.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.node.P2PPubSubMessage}
 */
proto.node.P2PPubSubMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.node.P2PPubSubMessage;
  return proto.node.P2PPubSubMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.node.P2PPubSubMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.node.P2PPubSubMessage}
 */
proto.node.P2PPubSubMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.node.DAVerificationRequest;
      reader.readMessage(value,proto.node.DAVerificationRequest.deserializeBinaryFromReader);
      msg.setDaVerificationRequest(value);
      break;
    case 2:
      var value = new proto.node.DAVerificationResponse;
      reader.readMessage(value,proto.node.DAVerificationResponse.deserializeBinaryFromReader);
      msg.setDaVerificationResponse(value);
      break;
    case 3:
      var value = new proto.node.StateVerificationRequest;
      reader.readMessage(value,proto.node.StateVerificationRequest.deserializeBinaryFromReader);
      msg.setStateVerificationRequest(value);
      break;
    case 4:
      var value = new proto.node.StateVerificationResponse;
      reader.readMessage(value,proto.node.StateVerificationResponse.deserializeBinaryFromReader);
      msg.setStateVerificationResponse(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.node.P2PPubSubMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.node.P2PPubSubMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.node.P2PPubSubMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.node.P2PPubSubMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDaVerificationRequest();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.node.DAVerificationRequest.serializeBinaryToWriter
    );
  }
  f = message.getDaVerificationResponse();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.node.DAVerificationResponse.serializeBinaryToWriter
    );
  }
  f = message.getStateVerificationRequest();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.node.StateVerificationRequest.serializeBinaryToWriter
    );
  }
  f = message.getStateVerificationResponse();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.node.StateVerificationResponse.serializeBinaryToWriter
    );
  }
};


/**
 * optional DAVerificationRequest da_verification_request = 1;
 * @return {?proto.node.DAVerificationRequest}
 */
proto.node.P2PPubSubMessage.prototype.getDaVerificationRequest = function() {
  return /** @type{?proto.node.DAVerificationRequest} */ (
    jspb.Message.getWrapperField(this, proto.node.DAVerificationRequest, 1));
};


/**
 * @param {?proto.node.DAVerificationRequest|undefined} value
 * @return {!proto.node.P2PPubSubMessage} returns this
*/
proto.node.P2PPubSubMessage.prototype.setDaVerificationRequest = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.node.P2PPubSubMessage} returns this
 */
proto.node.P2PPubSubMessage.prototype.clearDaVerificationRequest = function() {
  return this.setDaVerificationRequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.node.P2PPubSubMessage.prototype.hasDaVerificationRequest = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional DAVerificationResponse da_verification_response = 2;
 * @return {?proto.node.DAVerificationResponse}
 */
proto.node.P2PPubSubMessage.prototype.getDaVerificationResponse = function() {
  return /** @type{?proto.node.DAVerificationResponse} */ (
    jspb.Message.getWrapperField(this, proto.node.DAVerificationResponse, 2));
};


/**
 * @param {?proto.node.DAVerificationResponse|undefined} value
 * @return {!proto.node.P2PPubSubMessage} returns this
*/
proto.node.P2PPubSubMessage.prototype.setDaVerificationResponse = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.node.P2PPubSubMessage} returns this
 */
proto.node.P2PPubSubMessage.prototype.clearDaVerificationResponse = function() {
  return this.setDaVerificationResponse(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.node.P2PPubSubMessage.prototype.hasDaVerificationResponse = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional StateVerificationRequest state_verification_request = 3;
 * @return {?proto.node.StateVerificationRequest}
 */
proto.node.P2PPubSubMessage.prototype.getStateVerificationRequest = function() {
  return /** @type{?proto.node.StateVerificationRequest} */ (
    jspb.Message.getWrapperField(this, proto.node.StateVerificationRequest, 3));
};


/**
 * @param {?proto.node.StateVerificationRequest|undefined} value
 * @return {!proto.node.P2PPubSubMessage} returns this
*/
proto.node.P2PPubSubMessage.prototype.setStateVerificationRequest = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.node.P2PPubSubMessage} returns this
 */
proto.node.P2PPubSubMessage.prototype.clearStateVerificationRequest = function() {
  return this.setStateVerificationRequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.node.P2PPubSubMessage.prototype.hasStateVerificationRequest = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional StateVerificationResponse state_verification_response = 4;
 * @return {?proto.node.StateVerificationResponse}
 */
proto.node.P2PPubSubMessage.prototype.getStateVerificationResponse = function() {
  return /** @type{?proto.node.StateVerificationResponse} */ (
    jspb.Message.getWrapperField(this, proto.node.StateVerificationResponse, 4));
};


/**
 * @param {?proto.node.StateVerificationResponse|undefined} value
 * @return {!proto.node.P2PPubSubMessage} returns this
*/
proto.node.P2PPubSubMessage.prototype.setStateVerificationResponse = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.node.P2PPubSubMessage} returns this
 */
proto.node.P2PPubSubMessage.prototype.clearStateVerificationResponse = function() {
  return this.setStateVerificationResponse(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.node.P2PPubSubMessage.prototype.hasStateVerificationResponse = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.node.DAVerificationRequest.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.node.DAVerificationRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.node.DAVerificationRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.node.DAVerificationRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.node.DAVerificationRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    txnBundleHash: msg.getTxnBundleHash_asB64(),
    claimsList: jspb.Message.toObjectList(msg.getClaimsList(),
    blockchain_pb.ComputeClaim.toObject, includeInstance),
    randomnessProof: msg.getRandomnessProof_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.node.DAVerificationRequest}
 */
proto.node.DAVerificationRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.node.DAVerificationRequest;
  return proto.node.DAVerificationRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.node.DAVerificationRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.node.DAVerificationRequest}
 */
proto.node.DAVerificationRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setTxnBundleHash(value);
      break;
    case 2:
      var value = new blockchain_pb.ComputeClaim;
      reader.readMessage(value,blockchain_pb.ComputeClaim.deserializeBinaryFromReader);
      msg.addClaims(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setRandomnessProof(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.node.DAVerificationRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.node.DAVerificationRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.node.DAVerificationRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.node.DAVerificationRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTxnBundleHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getClaimsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      blockchain_pb.ComputeClaim.serializeBinaryToWriter
    );
  }
  f = message.getRandomnessProof_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
};


/**
 * optional bytes txn_bundle_hash = 1;
 * @return {!(string|Uint8Array)}
 */
proto.node.DAVerificationRequest.prototype.getTxnBundleHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes txn_bundle_hash = 1;
 * This is a type-conversion wrapper around `getTxnBundleHash()`
 * @return {string}
 */
proto.node.DAVerificationRequest.prototype.getTxnBundleHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getTxnBundleHash()));
};


/**
 * optional bytes txn_bundle_hash = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTxnBundleHash()`
 * @return {!Uint8Array}
 */
proto.node.DAVerificationRequest.prototype.getTxnBundleHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getTxnBundleHash()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.node.DAVerificationRequest} returns this
 */
proto.node.DAVerificationRequest.prototype.setTxnBundleHash = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * repeated blockchain.ComputeClaim claims = 2;
 * @return {!Array<!proto.blockchain.ComputeClaim>}
 */
proto.node.DAVerificationRequest.prototype.getClaimsList = function() {
  return /** @type{!Array<!proto.blockchain.ComputeClaim>} */ (
    jspb.Message.getRepeatedWrapperField(this, blockchain_pb.ComputeClaim, 2));
};


/**
 * @param {!Array<!proto.blockchain.ComputeClaim>} value
 * @return {!proto.node.DAVerificationRequest} returns this
*/
proto.node.DAVerificationRequest.prototype.setClaimsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.blockchain.ComputeClaim=} opt_value
 * @param {number=} opt_index
 * @return {!proto.blockchain.ComputeClaim}
 */
proto.node.DAVerificationRequest.prototype.addClaims = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.blockchain.ComputeClaim, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.node.DAVerificationRequest} returns this
 */
proto.node.DAVerificationRequest.prototype.clearClaimsList = function() {
  return this.setClaimsList([]);
};


/**
 * optional bytes randomness_proof = 3;
 * @return {!(string|Uint8Array)}
 */
proto.node.DAVerificationRequest.prototype.getRandomnessProof = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes randomness_proof = 3;
 * This is a type-conversion wrapper around `getRandomnessProof()`
 * @return {string}
 */
proto.node.DAVerificationRequest.prototype.getRandomnessProof_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getRandomnessProof()));
};


/**
 * optional bytes randomness_proof = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getRandomnessProof()`
 * @return {!Uint8Array}
 */
proto.node.DAVerificationRequest.prototype.getRandomnessProof_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getRandomnessProof()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.node.DAVerificationRequest} returns this
 */
proto.node.DAVerificationRequest.prototype.setRandomnessProof = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.node.DAVerificationResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.node.DAVerificationResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.node.DAVerificationResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.node.DAVerificationResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    result: (f = msg.getResult()) && blockchain_pb.DACheckResult.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.node.DAVerificationResponse}
 */
proto.node.DAVerificationResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.node.DAVerificationResponse;
  return proto.node.DAVerificationResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.node.DAVerificationResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.node.DAVerificationResponse}
 */
proto.node.DAVerificationResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new blockchain_pb.DACheckResult;
      reader.readMessage(value,blockchain_pb.DACheckResult.deserializeBinaryFromReader);
      msg.setResult(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.node.DAVerificationResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.node.DAVerificationResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.node.DAVerificationResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.node.DAVerificationResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResult();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      blockchain_pb.DACheckResult.serializeBinaryToWriter
    );
  }
};


/**
 * optional blockchain.DACheckResult result = 1;
 * @return {?proto.blockchain.DACheckResult}
 */
proto.node.DAVerificationResponse.prototype.getResult = function() {
  return /** @type{?proto.blockchain.DACheckResult} */ (
    jspb.Message.getWrapperField(this, blockchain_pb.DACheckResult, 1));
};


/**
 * @param {?proto.blockchain.DACheckResult|undefined} value
 * @return {!proto.node.DAVerificationResponse} returns this
*/
proto.node.DAVerificationResponse.prototype.setResult = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.node.DAVerificationResponse} returns this
 */
proto.node.DAVerificationResponse.prototype.clearResult = function() {
  return this.setResult(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.node.DAVerificationResponse.prototype.hasResult = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.node.StateVerificationRequest.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.node.StateVerificationRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.node.StateVerificationRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.node.StateVerificationRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.node.StateVerificationRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    txnBundleHash: msg.getTxnBundleHash_asB64(),
    claimsList: jspb.Message.toObjectList(msg.getClaimsList(),
    blockchain_pb.ComputeClaim.toObject, includeInstance),
    randomnessProof: msg.getRandomnessProof_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.node.StateVerificationRequest}
 */
proto.node.StateVerificationRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.node.StateVerificationRequest;
  return proto.node.StateVerificationRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.node.StateVerificationRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.node.StateVerificationRequest}
 */
proto.node.StateVerificationRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setTxnBundleHash(value);
      break;
    case 2:
      var value = new blockchain_pb.ComputeClaim;
      reader.readMessage(value,blockchain_pb.ComputeClaim.deserializeBinaryFromReader);
      msg.addClaims(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setRandomnessProof(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.node.StateVerificationRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.node.StateVerificationRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.node.StateVerificationRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.node.StateVerificationRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTxnBundleHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getClaimsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      blockchain_pb.ComputeClaim.serializeBinaryToWriter
    );
  }
  f = message.getRandomnessProof_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
};


/**
 * optional bytes txn_bundle_hash = 1;
 * @return {!(string|Uint8Array)}
 */
proto.node.StateVerificationRequest.prototype.getTxnBundleHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes txn_bundle_hash = 1;
 * This is a type-conversion wrapper around `getTxnBundleHash()`
 * @return {string}
 */
proto.node.StateVerificationRequest.prototype.getTxnBundleHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getTxnBundleHash()));
};


/**
 * optional bytes txn_bundle_hash = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTxnBundleHash()`
 * @return {!Uint8Array}
 */
proto.node.StateVerificationRequest.prototype.getTxnBundleHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getTxnBundleHash()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.node.StateVerificationRequest} returns this
 */
proto.node.StateVerificationRequest.prototype.setTxnBundleHash = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * repeated blockchain.ComputeClaim claims = 2;
 * @return {!Array<!proto.blockchain.ComputeClaim>}
 */
proto.node.StateVerificationRequest.prototype.getClaimsList = function() {
  return /** @type{!Array<!proto.blockchain.ComputeClaim>} */ (
    jspb.Message.getRepeatedWrapperField(this, blockchain_pb.ComputeClaim, 2));
};


/**
 * @param {!Array<!proto.blockchain.ComputeClaim>} value
 * @return {!proto.node.StateVerificationRequest} returns this
*/
proto.node.StateVerificationRequest.prototype.setClaimsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.blockchain.ComputeClaim=} opt_value
 * @param {number=} opt_index
 * @return {!proto.blockchain.ComputeClaim}
 */
proto.node.StateVerificationRequest.prototype.addClaims = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.blockchain.ComputeClaim, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.node.StateVerificationRequest} returns this
 */
proto.node.StateVerificationRequest.prototype.clearClaimsList = function() {
  return this.setClaimsList([]);
};


/**
 * optional bytes randomness_proof = 3;
 * @return {!(string|Uint8Array)}
 */
proto.node.StateVerificationRequest.prototype.getRandomnessProof = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes randomness_proof = 3;
 * This is a type-conversion wrapper around `getRandomnessProof()`
 * @return {string}
 */
proto.node.StateVerificationRequest.prototype.getRandomnessProof_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getRandomnessProof()));
};


/**
 * optional bytes randomness_proof = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getRandomnessProof()`
 * @return {!Uint8Array}
 */
proto.node.StateVerificationRequest.prototype.getRandomnessProof_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getRandomnessProof()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.node.StateVerificationRequest} returns this
 */
proto.node.StateVerificationRequest.prototype.setRandomnessProof = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.node.StateVerificationResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.node.StateVerificationResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.node.StateVerificationResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.node.StateVerificationResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    result: (f = msg.getResult()) && blockchain_pb.StateCheckResult.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.node.StateVerificationResponse}
 */
proto.node.StateVerificationResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.node.StateVerificationResponse;
  return proto.node.StateVerificationResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.node.StateVerificationResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.node.StateVerificationResponse}
 */
proto.node.StateVerificationResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new blockchain_pb.StateCheckResult;
      reader.readMessage(value,blockchain_pb.StateCheckResult.deserializeBinaryFromReader);
      msg.setResult(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.node.StateVerificationResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.node.StateVerificationResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.node.StateVerificationResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.node.StateVerificationResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResult();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      blockchain_pb.StateCheckResult.serializeBinaryToWriter
    );
  }
};


/**
 * optional blockchain.StateCheckResult result = 1;
 * @return {?proto.blockchain.StateCheckResult}
 */
proto.node.StateVerificationResponse.prototype.getResult = function() {
  return /** @type{?proto.blockchain.StateCheckResult} */ (
    jspb.Message.getWrapperField(this, blockchain_pb.StateCheckResult, 1));
};


/**
 * @param {?proto.blockchain.StateCheckResult|undefined} value
 * @return {!proto.node.StateVerificationResponse} returns this
*/
proto.node.StateVerificationResponse.prototype.setResult = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.node.StateVerificationResponse} returns this
 */
proto.node.StateVerificationResponse.prototype.clearResult = function() {
  return this.setResult(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.node.StateVerificationResponse.prototype.hasResult = function() {
  return jspb.Message.getField(this, 1) != null;
};


goog.object.extend(exports, proto.node);
