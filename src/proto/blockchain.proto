syntax = "proto3";

package blockchain;

message SignedTransaction {
    bytes from = 1;
    bytes signature = 2;
    Transaction txn = 3;
}

message Transaction {
    optional MintToken mint = 1;
    optional TransferToken transfer = 2;
    optional StakeToken stake = 3;
    optional UnstakeToken unstake = 4;
    optional CreateDataChain create_chain = 5;
    optional UpdateDataChain update_chain = 6;
    uint32 nonce = 7;
}

message MintToken {
    bytes receiver = 1;
    uint64 amount = 2 [jstype = JS_STRING];
}

message TransferToken {
    bytes receiver = 1;
    uint64 amount = 2 [jstype = JS_STRING];
}

enum StakeType {
    da_verifier = 0;
    state_verifier = 1;
}

message StakeToken {
    StakeType stake_type = 1;
    uint64 amount = 2 [jstype = JS_STRING];
}

message UnstakeToken {
    StakeType stake_type = 1;
    uint64 amount = 2 [jstype = JS_STRING];
}

message CreateDataChain {
    ComputeClaim root_claim = 1;
}

message UpdateDataChain {
    bytes root_claim_hash = 1;
    ComputeClaim claim = 2;
}

message WorldState {
    repeated Account accounts = 1;
    StakePool stake_pool = 2;
    bytes minter = 3;
    repeated DataChain data_chains = 4;
}

message Account {
    bytes address = 1;
    int32 nonce = 2;
    uint64 balance = 3 [jstype = JS_STRING];
    uint64 da_verifier_stake = 4 [jstype = JS_STRING];
    uint64 state_verifier_stake = 5 [jstype = JS_STRING];
}

message StakePool {
    uint64 da_verifier_pool = 1 [jstype = JS_STRING];
    repeated bytes da_verifiers = 2;
    uint64 state_verifier_pool = 3 [jstype = JS_STRING];
    repeated bytes state_verifiers = 4;
}

message DataChain {
    repeated ComputeClaim claims = 1;
    bytes root_claim_hash = 2;
    bytes head_claim_hash = 3;
}

message ComputeClaim {
    bytes claimer = 1;
    bytes prev_claim_hash = 2;
    ClaimDataRef data_contract = 3;
    ClaimDataRef input = 4;
    ClaimDataRef output = 5;
    uint64 max_cartesi_cycles = 6 [jstype = JS_STRING];
    bytes output_file_hash = 7;
}

message ClaimDataRef {
    string cid = 1;
    uint64 size = 2;
    bytes cartesiMerkleRoot = 3;
}

message DAInfo {
    uint32 size = 1;
    bytes cartesi_merkle_root = 2;
}

message Block {
    uint32 version = 1;
    bytes prev_block_hash = 2;
    repeated bytes accounts_merkle = 3;
    repeated SignedTransaction transactions = 4;
    BlockProof proof = 5;
    uint32 time = 6;
}

message BlockProof {
    bytes txn_bundle_hash = 1;
    bytes txn_bundle_proposer = 2;
    bytes randomness_proof = 3;
    repeated DACheckResult da_check_results = 4;
    bytes agg_da_check_result_signature = 5;
    repeated StateCheckResult state_check_results = 6;
    bytes agg_state_check_result_signature = 7;
}

message DACheckResult {
    bytes txn_bundle_hash = 1;
    bytes randomness_proof = 2;
    bytes signature = 3;
    bytes signer = 4;
    repeated ClaimDACheckResult claims = 5;
}

message StateCheckResult {
    bytes txn_bundle_hash = 1;
    bytes randomness_proof = 2;
    bytes signature = 3;
    bytes signer = 4;
    repeated ClaimStateCheckResult claims = 5;
}

message ClaimDACheckResult {
    bytes claim_hash = 1;
    bool data_available = 2;
}

message ClaimStateCheckResult {
    bytes claim_hash = 1;
    bool state_correct = 2;
}

message TransactionBundle {
    bytes head_block_hash = 1;
    repeated SignedTransaction transactions = 2;
}

message BlockMetadata {
    string cid = 1;
}