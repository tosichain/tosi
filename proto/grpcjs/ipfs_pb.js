// source: ipfs.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.CartesiIpfs.AddFileRequest', null, global);
goog.exportSymbol('proto.CartesiIpfs.AddFileResponse', null, global);
goog.exportSymbol('proto.CartesiIpfs.AddFileResponse.AddOneofCase', null, global);
goog.exportSymbol('proto.CartesiIpfs.AddFileResult', null, global);
goog.exportSymbol('proto.CartesiIpfs.CacheMerkleRootHashRequest', null, global);
goog.exportSymbol('proto.CartesiIpfs.CacheMerkleRootHashResponse', null, global);
goog.exportSymbol('proto.CartesiIpfs.GetFileRequest', null, global);
goog.exportSymbol('proto.CartesiIpfs.GetFileResponse', null, global);
goog.exportSymbol('proto.CartesiIpfs.GetFileResponse.GetOneofCase', null, global);
goog.exportSymbol('proto.CartesiIpfs.GetFileResult', null, global);
goog.exportSymbol('proto.CartesiIpfs.Hash', null, global);
goog.exportSymbol('proto.CartesiIpfs.Progress', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.CartesiIpfs.GetFileRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.CartesiIpfs.GetFileRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.CartesiIpfs.GetFileRequest.displayName = 'proto.CartesiIpfs.GetFileRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.CartesiIpfs.Progress = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.CartesiIpfs.Progress, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.CartesiIpfs.Progress.displayName = 'proto.CartesiIpfs.Progress';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.CartesiIpfs.GetFileResult = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.CartesiIpfs.GetFileResult, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.CartesiIpfs.GetFileResult.displayName = 'proto.CartesiIpfs.GetFileResult';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.CartesiIpfs.GetFileResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.CartesiIpfs.GetFileResponse.oneofGroups_);
};
goog.inherits(proto.CartesiIpfs.GetFileResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.CartesiIpfs.GetFileResponse.displayName = 'proto.CartesiIpfs.GetFileResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.CartesiIpfs.AddFileRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.CartesiIpfs.AddFileRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.CartesiIpfs.AddFileRequest.displayName = 'proto.CartesiIpfs.AddFileRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.CartesiIpfs.AddFileResult = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.CartesiIpfs.AddFileResult, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.CartesiIpfs.AddFileResult.displayName = 'proto.CartesiIpfs.AddFileResult';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.CartesiIpfs.AddFileResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.CartesiIpfs.AddFileResponse.oneofGroups_);
};
goog.inherits(proto.CartesiIpfs.AddFileResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.CartesiIpfs.AddFileResponse.displayName = 'proto.CartesiIpfs.AddFileResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.CartesiIpfs.Hash = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.CartesiIpfs.Hash, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.CartesiIpfs.Hash.displayName = 'proto.CartesiIpfs.Hash';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.CartesiIpfs.CacheMerkleRootHashRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.CartesiIpfs.CacheMerkleRootHashRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.CartesiIpfs.CacheMerkleRootHashRequest.displayName = 'proto.CartesiIpfs.CacheMerkleRootHashRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.CartesiIpfs.CacheMerkleRootHashResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.CartesiIpfs.CacheMerkleRootHashResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.CartesiIpfs.CacheMerkleRootHashResponse.displayName = 'proto.CartesiIpfs.CacheMerkleRootHashResponse';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.CartesiIpfs.GetFileRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.CartesiIpfs.GetFileRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.CartesiIpfs.GetFileRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CartesiIpfs.GetFileRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    ipfsPath: jspb.Message.getFieldWithDefault(msg, 1, ""),
    log2Size: jspb.Message.getFieldWithDefault(msg, 2, 0),
    outputPath: jspb.Message.getFieldWithDefault(msg, 3, ""),
    timeout: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.CartesiIpfs.GetFileRequest}
 */
proto.CartesiIpfs.GetFileRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.CartesiIpfs.GetFileRequest;
  return proto.CartesiIpfs.GetFileRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.CartesiIpfs.GetFileRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.CartesiIpfs.GetFileRequest}
 */
proto.CartesiIpfs.GetFileRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setIpfsPath(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setLog2Size(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setOutputPath(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTimeout(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.CartesiIpfs.GetFileRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.CartesiIpfs.GetFileRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.CartesiIpfs.GetFileRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CartesiIpfs.GetFileRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIpfsPath();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getLog2Size();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getOutputPath();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getTimeout();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
};


/**
 * optional string ipfs_path = 1;
 * @return {string}
 */
proto.CartesiIpfs.GetFileRequest.prototype.getIpfsPath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.CartesiIpfs.GetFileRequest} returns this
 */
proto.CartesiIpfs.GetFileRequest.prototype.setIpfsPath = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint32 log2_size = 2;
 * @return {number}
 */
proto.CartesiIpfs.GetFileRequest.prototype.getLog2Size = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.CartesiIpfs.GetFileRequest} returns this
 */
proto.CartesiIpfs.GetFileRequest.prototype.setLog2Size = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string output_path = 3;
 * @return {string}
 */
proto.CartesiIpfs.GetFileRequest.prototype.getOutputPath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.CartesiIpfs.GetFileRequest} returns this
 */
proto.CartesiIpfs.GetFileRequest.prototype.setOutputPath = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional uint64 timeout = 4;
 * @return {number}
 */
proto.CartesiIpfs.GetFileRequest.prototype.getTimeout = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.CartesiIpfs.GetFileRequest} returns this
 */
proto.CartesiIpfs.GetFileRequest.prototype.setTimeout = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.CartesiIpfs.Progress.prototype.toObject = function(opt_includeInstance) {
  return proto.CartesiIpfs.Progress.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.CartesiIpfs.Progress} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CartesiIpfs.Progress.toObject = function(includeInstance, msg) {
  var f, obj = {
    progress: jspb.Message.getFieldWithDefault(msg, 1, 0),
    updatedAt: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.CartesiIpfs.Progress}
 */
proto.CartesiIpfs.Progress.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.CartesiIpfs.Progress;
  return proto.CartesiIpfs.Progress.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.CartesiIpfs.Progress} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.CartesiIpfs.Progress}
 */
proto.CartesiIpfs.Progress.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setProgress(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setUpdatedAt(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.CartesiIpfs.Progress.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.CartesiIpfs.Progress.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.CartesiIpfs.Progress} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CartesiIpfs.Progress.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProgress();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getUpdatedAt();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
};


/**
 * optional uint64 progress = 1;
 * @return {number}
 */
proto.CartesiIpfs.Progress.prototype.getProgress = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.CartesiIpfs.Progress} returns this
 */
proto.CartesiIpfs.Progress.prototype.setProgress = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 updated_at = 2;
 * @return {number}
 */
proto.CartesiIpfs.Progress.prototype.getUpdatedAt = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.CartesiIpfs.Progress} returns this
 */
proto.CartesiIpfs.Progress.prototype.setUpdatedAt = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.CartesiIpfs.GetFileResult.prototype.toObject = function(opt_includeInstance) {
  return proto.CartesiIpfs.GetFileResult.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.CartesiIpfs.GetFileResult} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CartesiIpfs.GetFileResult.toObject = function(includeInstance, msg) {
  var f, obj = {
    outputPath: jspb.Message.getFieldWithDefault(msg, 1, ""),
    rootHash: (f = msg.getRootHash()) && proto.CartesiIpfs.Hash.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.CartesiIpfs.GetFileResult}
 */
proto.CartesiIpfs.GetFileResult.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.CartesiIpfs.GetFileResult;
  return proto.CartesiIpfs.GetFileResult.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.CartesiIpfs.GetFileResult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.CartesiIpfs.GetFileResult}
 */
proto.CartesiIpfs.GetFileResult.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setOutputPath(value);
      break;
    case 2:
      var value = new proto.CartesiIpfs.Hash;
      reader.readMessage(value,proto.CartesiIpfs.Hash.deserializeBinaryFromReader);
      msg.setRootHash(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.CartesiIpfs.GetFileResult.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.CartesiIpfs.GetFileResult.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.CartesiIpfs.GetFileResult} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CartesiIpfs.GetFileResult.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOutputPath();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getRootHash();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.CartesiIpfs.Hash.serializeBinaryToWriter
    );
  }
};


/**
 * optional string output_path = 1;
 * @return {string}
 */
proto.CartesiIpfs.GetFileResult.prototype.getOutputPath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.CartesiIpfs.GetFileResult} returns this
 */
proto.CartesiIpfs.GetFileResult.prototype.setOutputPath = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Hash root_hash = 2;
 * @return {?proto.CartesiIpfs.Hash}
 */
proto.CartesiIpfs.GetFileResult.prototype.getRootHash = function() {
  return /** @type{?proto.CartesiIpfs.Hash} */ (
    jspb.Message.getWrapperField(this, proto.CartesiIpfs.Hash, 2));
};


/**
 * @param {?proto.CartesiIpfs.Hash|undefined} value
 * @return {!proto.CartesiIpfs.GetFileResult} returns this
*/
proto.CartesiIpfs.GetFileResult.prototype.setRootHash = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.CartesiIpfs.GetFileResult} returns this
 */
proto.CartesiIpfs.GetFileResult.prototype.clearRootHash = function() {
  return this.setRootHash(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.CartesiIpfs.GetFileResult.prototype.hasRootHash = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.CartesiIpfs.GetFileResponse.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.CartesiIpfs.GetFileResponse.GetOneofCase = {
  GET_ONEOF_NOT_SET: 0,
  PROGRESS: 1,
  RESULT: 2
};

/**
 * @return {proto.CartesiIpfs.GetFileResponse.GetOneofCase}
 */
proto.CartesiIpfs.GetFileResponse.prototype.getGetOneofCase = function() {
  return /** @type {proto.CartesiIpfs.GetFileResponse.GetOneofCase} */(jspb.Message.computeOneofCase(this, proto.CartesiIpfs.GetFileResponse.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.CartesiIpfs.GetFileResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.CartesiIpfs.GetFileResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.CartesiIpfs.GetFileResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CartesiIpfs.GetFileResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    progress: (f = msg.getProgress()) && proto.CartesiIpfs.Progress.toObject(includeInstance, f),
    result: (f = msg.getResult()) && proto.CartesiIpfs.GetFileResult.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.CartesiIpfs.GetFileResponse}
 */
proto.CartesiIpfs.GetFileResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.CartesiIpfs.GetFileResponse;
  return proto.CartesiIpfs.GetFileResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.CartesiIpfs.GetFileResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.CartesiIpfs.GetFileResponse}
 */
proto.CartesiIpfs.GetFileResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.CartesiIpfs.Progress;
      reader.readMessage(value,proto.CartesiIpfs.Progress.deserializeBinaryFromReader);
      msg.setProgress(value);
      break;
    case 2:
      var value = new proto.CartesiIpfs.GetFileResult;
      reader.readMessage(value,proto.CartesiIpfs.GetFileResult.deserializeBinaryFromReader);
      msg.setResult(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.CartesiIpfs.GetFileResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.CartesiIpfs.GetFileResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.CartesiIpfs.GetFileResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CartesiIpfs.GetFileResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProgress();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.CartesiIpfs.Progress.serializeBinaryToWriter
    );
  }
  f = message.getResult();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.CartesiIpfs.GetFileResult.serializeBinaryToWriter
    );
  }
};


/**
 * optional Progress progress = 1;
 * @return {?proto.CartesiIpfs.Progress}
 */
proto.CartesiIpfs.GetFileResponse.prototype.getProgress = function() {
  return /** @type{?proto.CartesiIpfs.Progress} */ (
    jspb.Message.getWrapperField(this, proto.CartesiIpfs.Progress, 1));
};


/**
 * @param {?proto.CartesiIpfs.Progress|undefined} value
 * @return {!proto.CartesiIpfs.GetFileResponse} returns this
*/
proto.CartesiIpfs.GetFileResponse.prototype.setProgress = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.CartesiIpfs.GetFileResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.CartesiIpfs.GetFileResponse} returns this
 */
proto.CartesiIpfs.GetFileResponse.prototype.clearProgress = function() {
  return this.setProgress(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.CartesiIpfs.GetFileResponse.prototype.hasProgress = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional GetFileResult result = 2;
 * @return {?proto.CartesiIpfs.GetFileResult}
 */
proto.CartesiIpfs.GetFileResponse.prototype.getResult = function() {
  return /** @type{?proto.CartesiIpfs.GetFileResult} */ (
    jspb.Message.getWrapperField(this, proto.CartesiIpfs.GetFileResult, 2));
};


/**
 * @param {?proto.CartesiIpfs.GetFileResult|undefined} value
 * @return {!proto.CartesiIpfs.GetFileResponse} returns this
*/
proto.CartesiIpfs.GetFileResponse.prototype.setResult = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.CartesiIpfs.GetFileResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.CartesiIpfs.GetFileResponse} returns this
 */
proto.CartesiIpfs.GetFileResponse.prototype.clearResult = function() {
  return this.setResult(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.CartesiIpfs.GetFileResponse.prototype.hasResult = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.CartesiIpfs.AddFileRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.CartesiIpfs.AddFileRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.CartesiIpfs.AddFileRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CartesiIpfs.AddFileRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    filePath: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.CartesiIpfs.AddFileRequest}
 */
proto.CartesiIpfs.AddFileRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.CartesiIpfs.AddFileRequest;
  return proto.CartesiIpfs.AddFileRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.CartesiIpfs.AddFileRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.CartesiIpfs.AddFileRequest}
 */
proto.CartesiIpfs.AddFileRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setFilePath(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.CartesiIpfs.AddFileRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.CartesiIpfs.AddFileRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.CartesiIpfs.AddFileRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CartesiIpfs.AddFileRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFilePath();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string file_path = 1;
 * @return {string}
 */
proto.CartesiIpfs.AddFileRequest.prototype.getFilePath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.CartesiIpfs.AddFileRequest} returns this
 */
proto.CartesiIpfs.AddFileRequest.prototype.setFilePath = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.CartesiIpfs.AddFileResult.prototype.toObject = function(opt_includeInstance) {
  return proto.CartesiIpfs.AddFileResult.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.CartesiIpfs.AddFileResult} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CartesiIpfs.AddFileResult.toObject = function(includeInstance, msg) {
  var f, obj = {
    ipfsPath: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.CartesiIpfs.AddFileResult}
 */
proto.CartesiIpfs.AddFileResult.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.CartesiIpfs.AddFileResult;
  return proto.CartesiIpfs.AddFileResult.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.CartesiIpfs.AddFileResult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.CartesiIpfs.AddFileResult}
 */
proto.CartesiIpfs.AddFileResult.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setIpfsPath(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.CartesiIpfs.AddFileResult.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.CartesiIpfs.AddFileResult.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.CartesiIpfs.AddFileResult} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CartesiIpfs.AddFileResult.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIpfsPath();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string ipfs_path = 1;
 * @return {string}
 */
proto.CartesiIpfs.AddFileResult.prototype.getIpfsPath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.CartesiIpfs.AddFileResult} returns this
 */
proto.CartesiIpfs.AddFileResult.prototype.setIpfsPath = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.CartesiIpfs.AddFileResponse.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.CartesiIpfs.AddFileResponse.AddOneofCase = {
  ADD_ONEOF_NOT_SET: 0,
  PROGRESS: 1,
  RESULT: 2
};

/**
 * @return {proto.CartesiIpfs.AddFileResponse.AddOneofCase}
 */
proto.CartesiIpfs.AddFileResponse.prototype.getAddOneofCase = function() {
  return /** @type {proto.CartesiIpfs.AddFileResponse.AddOneofCase} */(jspb.Message.computeOneofCase(this, proto.CartesiIpfs.AddFileResponse.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.CartesiIpfs.AddFileResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.CartesiIpfs.AddFileResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.CartesiIpfs.AddFileResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CartesiIpfs.AddFileResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    progress: (f = msg.getProgress()) && proto.CartesiIpfs.Progress.toObject(includeInstance, f),
    result: (f = msg.getResult()) && proto.CartesiIpfs.AddFileResult.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.CartesiIpfs.AddFileResponse}
 */
proto.CartesiIpfs.AddFileResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.CartesiIpfs.AddFileResponse;
  return proto.CartesiIpfs.AddFileResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.CartesiIpfs.AddFileResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.CartesiIpfs.AddFileResponse}
 */
proto.CartesiIpfs.AddFileResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.CartesiIpfs.Progress;
      reader.readMessage(value,proto.CartesiIpfs.Progress.deserializeBinaryFromReader);
      msg.setProgress(value);
      break;
    case 2:
      var value = new proto.CartesiIpfs.AddFileResult;
      reader.readMessage(value,proto.CartesiIpfs.AddFileResult.deserializeBinaryFromReader);
      msg.setResult(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.CartesiIpfs.AddFileResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.CartesiIpfs.AddFileResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.CartesiIpfs.AddFileResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CartesiIpfs.AddFileResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProgress();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.CartesiIpfs.Progress.serializeBinaryToWriter
    );
  }
  f = message.getResult();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.CartesiIpfs.AddFileResult.serializeBinaryToWriter
    );
  }
};


/**
 * optional Progress progress = 1;
 * @return {?proto.CartesiIpfs.Progress}
 */
proto.CartesiIpfs.AddFileResponse.prototype.getProgress = function() {
  return /** @type{?proto.CartesiIpfs.Progress} */ (
    jspb.Message.getWrapperField(this, proto.CartesiIpfs.Progress, 1));
};


/**
 * @param {?proto.CartesiIpfs.Progress|undefined} value
 * @return {!proto.CartesiIpfs.AddFileResponse} returns this
*/
proto.CartesiIpfs.AddFileResponse.prototype.setProgress = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.CartesiIpfs.AddFileResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.CartesiIpfs.AddFileResponse} returns this
 */
proto.CartesiIpfs.AddFileResponse.prototype.clearProgress = function() {
  return this.setProgress(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.CartesiIpfs.AddFileResponse.prototype.hasProgress = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional AddFileResult result = 2;
 * @return {?proto.CartesiIpfs.AddFileResult}
 */
proto.CartesiIpfs.AddFileResponse.prototype.getResult = function() {
  return /** @type{?proto.CartesiIpfs.AddFileResult} */ (
    jspb.Message.getWrapperField(this, proto.CartesiIpfs.AddFileResult, 2));
};


/**
 * @param {?proto.CartesiIpfs.AddFileResult|undefined} value
 * @return {!proto.CartesiIpfs.AddFileResponse} returns this
*/
proto.CartesiIpfs.AddFileResponse.prototype.setResult = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.CartesiIpfs.AddFileResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.CartesiIpfs.AddFileResponse} returns this
 */
proto.CartesiIpfs.AddFileResponse.prototype.clearResult = function() {
  return this.setResult(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.CartesiIpfs.AddFileResponse.prototype.hasResult = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.CartesiIpfs.Hash.prototype.toObject = function(opt_includeInstance) {
  return proto.CartesiIpfs.Hash.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.CartesiIpfs.Hash} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CartesiIpfs.Hash.toObject = function(includeInstance, msg) {
  var f, obj = {
    data: msg.getData_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.CartesiIpfs.Hash}
 */
proto.CartesiIpfs.Hash.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.CartesiIpfs.Hash;
  return proto.CartesiIpfs.Hash.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.CartesiIpfs.Hash} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.CartesiIpfs.Hash}
 */
proto.CartesiIpfs.Hash.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.CartesiIpfs.Hash.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.CartesiIpfs.Hash.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.CartesiIpfs.Hash} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CartesiIpfs.Hash.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getData_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes data = 1;
 * @return {!(string|Uint8Array)}
 */
proto.CartesiIpfs.Hash.prototype.getData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes data = 1;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
proto.CartesiIpfs.Hash.prototype.getData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getData()));
};


/**
 * optional bytes data = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
proto.CartesiIpfs.Hash.prototype.getData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getData()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.CartesiIpfs.Hash} returns this
 */
proto.CartesiIpfs.Hash.prototype.setData = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.CartesiIpfs.CacheMerkleRootHashRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.CartesiIpfs.CacheMerkleRootHashRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.CartesiIpfs.CacheMerkleRootHashRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CartesiIpfs.CacheMerkleRootHashRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    ipfsPath: jspb.Message.getFieldWithDefault(msg, 1, ""),
    log2Size: jspb.Message.getFieldWithDefault(msg, 2, 0),
    merkleRootHash: (f = msg.getMerkleRootHash()) && proto.CartesiIpfs.Hash.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.CartesiIpfs.CacheMerkleRootHashRequest}
 */
proto.CartesiIpfs.CacheMerkleRootHashRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.CartesiIpfs.CacheMerkleRootHashRequest;
  return proto.CartesiIpfs.CacheMerkleRootHashRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.CartesiIpfs.CacheMerkleRootHashRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.CartesiIpfs.CacheMerkleRootHashRequest}
 */
proto.CartesiIpfs.CacheMerkleRootHashRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setIpfsPath(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setLog2Size(value);
      break;
    case 3:
      var value = new proto.CartesiIpfs.Hash;
      reader.readMessage(value,proto.CartesiIpfs.Hash.deserializeBinaryFromReader);
      msg.setMerkleRootHash(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.CartesiIpfs.CacheMerkleRootHashRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.CartesiIpfs.CacheMerkleRootHashRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.CartesiIpfs.CacheMerkleRootHashRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CartesiIpfs.CacheMerkleRootHashRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIpfsPath();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getLog2Size();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getMerkleRootHash();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.CartesiIpfs.Hash.serializeBinaryToWriter
    );
  }
};


/**
 * optional string ipfs_path = 1;
 * @return {string}
 */
proto.CartesiIpfs.CacheMerkleRootHashRequest.prototype.getIpfsPath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.CartesiIpfs.CacheMerkleRootHashRequest} returns this
 */
proto.CartesiIpfs.CacheMerkleRootHashRequest.prototype.setIpfsPath = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint32 log2_size = 2;
 * @return {number}
 */
proto.CartesiIpfs.CacheMerkleRootHashRequest.prototype.getLog2Size = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.CartesiIpfs.CacheMerkleRootHashRequest} returns this
 */
proto.CartesiIpfs.CacheMerkleRootHashRequest.prototype.setLog2Size = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional Hash merkle_root_hash = 3;
 * @return {?proto.CartesiIpfs.Hash}
 */
proto.CartesiIpfs.CacheMerkleRootHashRequest.prototype.getMerkleRootHash = function() {
  return /** @type{?proto.CartesiIpfs.Hash} */ (
    jspb.Message.getWrapperField(this, proto.CartesiIpfs.Hash, 3));
};


/**
 * @param {?proto.CartesiIpfs.Hash|undefined} value
 * @return {!proto.CartesiIpfs.CacheMerkleRootHashRequest} returns this
*/
proto.CartesiIpfs.CacheMerkleRootHashRequest.prototype.setMerkleRootHash = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.CartesiIpfs.CacheMerkleRootHashRequest} returns this
 */
proto.CartesiIpfs.CacheMerkleRootHashRequest.prototype.clearMerkleRootHash = function() {
  return this.setMerkleRootHash(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.CartesiIpfs.CacheMerkleRootHashRequest.prototype.hasMerkleRootHash = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.CartesiIpfs.CacheMerkleRootHashResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.CartesiIpfs.CacheMerkleRootHashResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.CartesiIpfs.CacheMerkleRootHashResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CartesiIpfs.CacheMerkleRootHashResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.CartesiIpfs.CacheMerkleRootHashResponse}
 */
proto.CartesiIpfs.CacheMerkleRootHashResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.CartesiIpfs.CacheMerkleRootHashResponse;
  return proto.CartesiIpfs.CacheMerkleRootHashResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.CartesiIpfs.CacheMerkleRootHashResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.CartesiIpfs.CacheMerkleRootHashResponse}
 */
proto.CartesiIpfs.CacheMerkleRootHashResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.CartesiIpfs.CacheMerkleRootHashResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.CartesiIpfs.CacheMerkleRootHashResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.CartesiIpfs.CacheMerkleRootHashResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CartesiIpfs.CacheMerkleRootHashResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};


goog.object.extend(exports, proto.CartesiIpfs);
